import { AnalyticsSnippet } from '@segment/analytics-next';

// This client was automatically generated by Segment Typewriter. ** Do Not Edit **
// To update this file, run:
//   npx typewriter

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AccountDropdownPendingTasksFetched {
  environment_key?: string;
  has_inaccessible_tasks?: boolean;
  num_pending_tasks?: number;
  num_visible_pending_tasks?: number;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AddTeamsInsteadOfUsersClicked {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * ApiKey schema
 */
export interface APIKey {
  action: string;
  api_key_id: string;
  api_key_version?: number;
  environment_key?: string;
  organization_key?: null | string;
  space_key: string;
}

/**
 * Widget-Builder Content Type Assigment LifeCycle
 */
export interface AppWidgetBuilderContenttypeAssignment {
  /**
   * What lifecycle action has been triggered, e.g. Create, Delete, LocationAdded, WidgetSaved.
   */
  app_event_name: string;
  /**
   * The content type that has been assigned to the widget.
   */
  content_type?: string;
  /**
   * The ID of the app that has been assigned to the widget.
   */
  contentful_app_id: string;
  /**
   * The ID of the environment that has been assigned to the widget.
   */
  environment_key?: string;
  /**
   * The field type that has been assigned to field assigned to the widget.
   */
  field_type?: string;
  organization_key: string;
  space_key: string;
  /**
   * The location of the widget, e.g. Sidebar, Field
   */
  widget_location: string;
}

/**
 * Widget-Builder Location LifeCycle
 */
export interface AppWidgetBuilderWidgetlocationLifecycle {
  /**
   * What lifecycle action has been triggered, e.g. NewBrickAdded, BrickMoved,
   * BrickPropEditted, BrickDeleted
   */
  app_event_name: string;
  /**
   * The content type that has been assigned to the widget.
   */
  content_type?: string;
  /**
   * The ID of the app that has been assigned to the widget.
   */
  contentful_app_id: string;
  /**
   * The ID of the environment that has been assigned to the widget.
   */
  environment_key?: string;
  /**
   * The field type that has been assigned to field assigned to the widget.
   */
  field_type?: string;
  organization_key: string;
  space_key: string;
  /**
   * The location of the widget, e.g. Sidebar, Field
   */
  widget_location: string;
}

/**
 * event called when an app makes a call with the cma adapter
 */
export interface AppCmaAdapterCalled {
  /**
   * the method of the call (e.g. get, getMany etc.)
   */
  action: string;
  /**
   * the entity type of the call (e.g. entry, contentType etc.)
   */
  entity_type: string;
  /**
   * the environment where the widget is rendered (not coming from the user input)
   */
  environment_key: string;
  /**
   * the location of the custom widget (e.g. sidebar)
   */
  location: string;
  /**
   * the organization owning the widget
   */
  organization_key: string;
  /**
   * the space in which the widget is rendered (not coming from the user input)
   */
  space_key: string;
  /**
   * the environment the CMA request is being sent to (coming from user input)
   */
  target_environment_key?: string;
  /**
   * the space the CMA request is being sent to (coming from user input)
   */
  target_space_key?: string;
  widget_key: string;
  /**
   * the namespace of the widget (e.g. app or extension)
   */
  widget_namespace: string;
}

/**
 * Records an event in App lifecycle
 */
export interface AppLifecycleEvent {
  /**
   * Name of lifecycle event
   */
  app_event_name: string;
  /**
   * ID of Contentful App
   */
  contentful_app_id: string;
  /**
   * Web App generated correlation ID
   */
  contentful_event_id: string;
  environment_key?: string;
  /**
   * Refers to organization_key
   */
  organization_key?: null | string;
  /**
   * Refers to space_key
   */
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppLoadingStepPerformanceMeasured {
  /**
   * The loading step that is measured. Can be `dom_content_loaded`, `first_contentful_paint`
   * or `time_to_interactive`.
   */
  action?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  state_name?: string;
  /**
   * Measured loading time in milliseconds. Can be null if measuring wasn't successful, e.g.
   * due to missing browser support for time to interactive measurements.
   */
  value?: number | null;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppLogoutClicked {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * Used to track all events when the user either opt-in or opt-out of the redesign
 */
export interface AppMarketplaceRedesignOptIn {
  environment_key?: string;
  /**
   * true for opt-in, false for opt-out
   */
  opt_in?: boolean;
  organization_key?: string;
  space_key?: string;
}

/**
 * Used to track all values that users put in the search on the in-app marketplace
 */
export interface AppMarketplaceSearchInput {
  environment_key?: string;
  number_of_installed_apps?: number;
  organization_key?: string;
  search_value?: string;
  space_key?: string;
}

/**
 * Web app opened by visiting app.contentful.com
 */
export interface AppOpen {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  properties: any;
}

/**
 * Used to track all events when the user picks a predefined app icon and saves it
 */
export interface AppPredefinedIconSaved {
  /**
   * Icon color
   */
  icon_color?: string;
  /**
   * Icon name
   */
  icon_name?: string;
  organization_key?: string;
  widget_key?: string;
  /**
   * the namespace of the widget (e.g. app or extension)
   */
  widget_namespace?: string;
}

/**
 * Used to track a visit to the app details Sharing tab.
 */
export interface AppSharingPageVisited {
  organization_key?: string;
  user_id: string;
  widget_key?: string;
  /**
   * the namespace of the widget (e.g. app or extension)
   */
  widget_namespace?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialGetInTouchClicked {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialHelpLinkClicked {
  environment_key?: string;
  from_state?: string;
  href?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialStartClicked {
  element_id?: string;
  environment_key?: string;
  from_state?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialStartPerformanceMeasured {
  /**
   * Measured duration in milliseconds.
   */
  duration?: number;
  environment_key?: string;
  from_state?: string;
  is_successful?: boolean;
  organization_key?: string;
  space_key?: string;
  with_content_model?: boolean;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialStarted {
  from?: string;
  organization_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AppTrialTagClicked {
  environment_key?: string;
  is_owner_or_admin?: boolean;
  num_trial_days_left?: number;
  organization_key?: string;
  space_key?: string;
  type?: string;
}

/**
 * Records a reason for App uninstallation
 */
export interface AppUninstallationReason {
  /**
   * ID of Contentful App
   */
  contentful_app_id: string;
  /**
   * Web App generated correlation ID
   */
  contentful_event_id: string;
  /**
   * Is reason custom or not
   */
  custom: boolean;
  environment_key?: string;
  /**
   * Refers to organization_key
   */
  organization_key?: null | string;
  /**
   * Reason for uninstalling
   */
  reason: string;
  /**
   * Refers to space_key
   */
  space_key: string;
}

/**
 * Generic event used to collect data on experiments around the app framework.
 */
export interface AppsExperimentInteracted {
  action: string;
  app_definition_id?: string;
  context?: string;
  environment_key?: string;
  experiment_id: string;
  experiment_variation?: string;
  organization_key?: string;
  space_key?: string;
  subject?: string;
  user_id?: string;
  value?: string;
}

export interface AppsLifecycleEvent {
  data?: Data;
}

export interface Data {
  app_event_name?: string;
  contentful_app_id?: string;
  contentful_event_id?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface AssetListAddAssetClicked {
  action?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * Tracks usage of boilerplate projects
 */
export interface Boilerplate {
  action: string;
  environment_key?: string;
  organization_key: string;
  platform: string;
  space_key: string;
}

/**
 * Used to track a click on tutorial link on app details page while creating a new app.
 */
export interface BuildYourFirstAppLinkClicked {
  organization_key?: string;
  widget_key?: string;
  /**
   * the namespace of the widget (e.g. app or extension)
   */
  widget_namespace?: string;
}

/**
 * Used to track the number of users that bulk install or uninstall contentful apps.
 */
export interface BulkAppInstallationManagement {
  app_key?: string;
  environment_keys?: string[];
  /**
   * Install or uninstall
   */
  event_type?: BulkAppInstallationManagementEventType;
  organization_key?: string;
  space_key?: string;
}

/**
 * Install or uninstall
 */
export type BulkAppInstallationManagementEventType = 'install' | 'uninstall';

/**
 * churn survey schema
 */
export interface ChurnSurvey {
  answers?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  type: string;
  user_id?: string;
}

/**
 * This is used to track events coming from the cmd-k feature.
 */
export interface CommandKAction {
  /**
   * What action has been triggered, e.g. opened, action-call etc.
   */
  action_type: string;
  /**
   * Key of the command that has been triggered
   */
  command_key?: string;
  environment_key?: string;
  /**
   * Current route state
   */
  from_state: string;
  /**
   * What command group the action has been called
   */
  group?: string;
  organization_key: string;
  space_key: string;
}

/**
 * Used to track a click on the 'I am interested' button on the community apps banner.
 */
export interface CommunityAppsInterestedClick {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  user_id: string;
}

/**
 * Schema for any event that has to do with content preview in our webapp
 */
export interface ContentPreview {
  content_type_id?: string;
  content_type_name?: string;
  environment_key?: string;
  organization_key: string;
  preview_id: string;
  preview_name: string;
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ContentPreviewActionPerformed {
  action?: string;
  environment_key?: string;
  id?: string;
  is_discovery_app?: boolean;
  name?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ContentTypeFieldAdded {
  content_type_id?: string;
  content_type_name?: string;
  environment_key?: string;
  field_id?: string;
  field_item_type?: any;
  field_name?: string;
  field_type?: string;
  organization_key?: string;
  space_key?: string;
}

export interface ContentTypeFieldInteraction {
  content_type_id: string;
  content_type_name: string;
  content_type_num_fields: number;
  content_type_version?: number;
  environment_key: string;
  interaction: string;
  organization_key: string;
  space_key: string;
  ui_source: string;
}

export interface ContentTypeFieldSaved {
  content_type_id?: string;
  content_type_name?: string;
  content_type_version?: number;
  environment_key?: string;
  field_id?: string;
  field_name?: string;
  field_position?: number;
  field_type?: string;
  initial_value_settings?: InitialValueSettings;
  is_composition_enabled?: boolean;
  organization_key?: string;
  space_key?: string;
  validation_settings?: ValidationSettings;
}

export interface InitialValueSettings {
  is_set: boolean;
  num_locales_available: number;
  num_locales_set: number;
}

export interface ValidationSettings {
  /**
   * Only applicable for reference fields
   */
  num_allowed_content_types: number;
  num_validations: number;
}

export interface ContentTypeGroupInteraction {
  content_type_id: string;
  content_type_name: string;
  content_type_num_fields: number;
  content_type_version?: number;
  environment_key: string;
  group_id: string;
  group_name: string;
  group_type?: string;
  interaction: string;
  organization_key: string;
  space_key: string;
  ui_source: string;
}

export interface ContentTypeSaved {
  content_type_id: string;
  content_type_name: string;
  content_type_version: number;
  created_at: Date;
  environment_key: string;
  num_fields: number;
  organization_key: string;
  /**
   * Id of the actor that saved the content type
   */
  saved_by_id: string;
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface CreateNewEntryOfSameCTClicked {
  content_type_id?: string;
  entry_id?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * Tracks content type, search filters, and queries exported into CSV
 */
export interface CSVExported {
  entity_type: string;
  environment_key: string;
  /**
   * User executing the export
   */
  executing_user_id: string;
  items_count: number;
  organization_key: string;
  sequence_key: string[] | boolean | number | number | { [key: string]: any } | null | string;
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface CtaClicked {
  action?: string;
  cta_location?: string;
  cta_location_type?: string;
  environment_key?: string;
  is_targeted_cta?: boolean;
  organization_key?: string;
  space_key?: string;
  target_organization_key?: string;
  target_space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface CtaDisplayed {
  action?: string;
  cta_location?: string;
  cta_location_type?: string;
  environment_key?: string;
  is_targeted_cta?: boolean;
  organization_key?: string;
  space_key?: string;
  target_organization_key?: string;
  target_space_key?: string;
}

/**
 * Used to track a visit of the Custom apps page of the marketplace.
 */
export interface CustomAppsPageVisited {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  user_id: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface DegradedAppPerformanceModalShown {
  environment_key?: string;
  organization_key?: string;
  reason?: string;
  space_key?: string;
}

/**
 * Emitted when a job is triggered
 */
export interface Dialog {
  /**
   * action performed in relationship with the dialog. Example: (dialog) open
   */
  action: string;
  environment_key?: string;
  /**
   * unique id generated, to make funnel analytics way simpler
   */
  funnel_id?: null | string;
  /**
   * name identifying the current dialog name. Example: jobs_create
   */
  name: string;
  /**
   * refers to GK organization key
   */
  organization_key: string;
  /**
   * if known, identifies what the dialog is intended to fulfill. Example: Entry.publish
   */
  purpose?: null | string;
  /**
   * refers to GK space key
   */
  space_key: string;
}

export interface EarlyAccessInteraction {
  eap_identifier: string;
  environment_key: string;
  interaction: string;
  organization_key: string;
  space_key: string;
  ui_source: string;
}

export interface EditorInterfaceFieldUpdated {
  content_type_id: string;
  content_type_version: number;
  environment_key: string;
  field_id: string;
  field_settings: { [key: string]: any };
  field_type: string;
  organization_key: string;
  space_key: string;
  widget_id: string;
}

export interface EditorInterfaceSaved {
  content_type_id: string;
  content_type_version: number;
  environment_key: string;
  groups: Group[];
  num_groups: number;
  num_tabs?: number;
  organization_key: string;
  space_key: string;
}

export interface Group {
  field_ids?: string[];
  group_id: string;
  group_name: string;
  group_widget_id: string;
  num_fields: number;
}

export interface EditorLoaded {
  /**
   * `init` is triggered every time a slide is loaded. `entity_loaded` is triggered when the
   * editor's main entity is loaded. Historically, `sharejs_connected` was triggered when a
   * connection with ShareJS has been established. Since ShareJS got removed, the more generic
   * `doc_connected` is triggered. `links_rendered` is triggered when all the links
   * (references, media, and rich text embeds / entry hyperlinks) in a slide have been fetched
   * and rendered. `fully_interactive` is trigger when both the links have rendered and the
   * entry has become editable (historically there was a race condition between
   * `sharejs_connected` and `links_rendered`).
   */
  action?: EditorLoadedAction;
  /**
   * The ID of the entity loaded
   */
  entity_id?: string;
  /**
   * The type of entity loaded (`entry` or `asset`)
   */
  entity_type?: string;
  environment_key?: string;
  /**
   * The total number of links (reference links, media field assets, rich text embedded block
   * and inline entries, rich text embedded block assets, and rich text hyperlinked entries)
   * in the entry on initial load
   */
  link_count?: number;
  /**
   * The overall number of reference and media field instances in an individual entry (1
   * locale field = 1 instance)
   */
  link_field_editor_instance_count?: number;
  /**
   * Number of milliseconds since the initial load of the entry
   */
  load_ms?: number;
  organization_key?: string;
  /**
   * The overall number of rich text editor instances in an individual entry (1 locale field
   * editor = 1 instance)
   */
  rich_text_editor_instance_count?: number;
  /**
   * Level of the entry editor within the slides (zero-indexed, -1 if the slide was closed at
   * the time the event is triggered)
   */
  slide_level?: number;
  /**
   * ID uniquely identifying the slide instance - does NOT uniquely identify the entry
   */
  slide_uuid?: string;
  /**
   * ID uniquely identifying the overall session and therefore all slides loaded around the
   * same time within the same browser tab
   */
  slides_controller_uuid?: string;
  space_key?: string;
  /**
   * The total number of slides open when the entry is initially loaded, default = 0 if there
   * are no slides
   */
  total_slide_count?: number;
}

/**
 * `init` is triggered every time a slide is loaded. `entity_loaded` is triggered when the
 * editor's main entity is loaded. Historically, `sharejs_connected` was triggered when a
 * connection with ShareJS has been established. Since ShareJS got removed, the more generic
 * `doc_connected` is triggered. `links_rendered` is triggered when all the links
 * (references, media, and rich text embeds / entry hyperlinks) in a slide have been fetched
 * and rendered. `fully_interactive` is trigger when both the links have rendered and the
 * entry has become editable (historically there was a race condition between
 * `sharejs_connected` and `links_rendered`).
 */
export type EditorLoadedAction =
  | 'doc_connected'
  | 'entity_loaded'
  | 'fully_interactive'
  | 'init'
  | 'links_rendered'
  | 'sharejs_connected';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EditorWorkbenchTabOpened {
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  tab_name?: string;
}

export interface ElementClick {
  /**
   * Contexts are a remnant from Snowplow event tracking. This is a JSON stringified array of
   * objects where each object used to represent a separate context Snowplow event that would
   * be tracked into a separate Snowplow table depending on its `schema` prop.
   */
  contexts?: string;
  element_id?: string;
  environment_key?: string;
  from_state?: string;
  group_id?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EnterpriseSpaceAssignmentStepPerformed {
  action?: string;
  current_plan_id?: string;
  current_plan_name?: string;
  flow?: string;
  new_plan_id?: string;
  new_plan_name?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EnterpriseSpaceCreationStepPerformed {
  action?: string;
  flow?: string;
  organization_key?: string;
  plan_id?: string;
  selected_plan_id?: string;
  selected_plan_name?: string;
  space_type?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EntityCreateButtonErrored {
  enforced?: boolean;
  entity_type?: string;
  environment_key?: string;
  organization_key?: string;
  reason?: any;
  space_key?: string;
}

/**
 * Web app entity editor edit conflicts tracking which became relevant with the removal of
 * ShareJS, making edits through the CMA instead. This event is tracked when persisting
 * local editor changes fails due to a CMA version mismatch error. `local_entity` refers to
 * the last CMA version of the entity known to the entity editor without local changes and
 * before the conflict. All pending local changes are based on this entity version.
 * `remote_entity` refers to the most recent version of the entity which has caused the
 * version mismatch and thus might have conflicts with the local changes on top of
 * `local_entity`.
 */
export interface EntityEditorEditConflict {
  /**
   * Version of our editor's auto conflict resolution version. Should bump this whenever we
   * fit to be able to only compare events of the same implemented version.
   */
  auto_conflict_resolution_version: number;
  entity_id: string;
  entity_type: EntityEditorEditConflictEntityType;
  environment_key?: string;
  /**
   * Whether or not the current editor implementation is able to resolve the conflict without
   * the user's input.
   */
  is_conflict_auto_resolvable: boolean;
  /**
   * Comma separated paths `path,...` where `path` can be either
   * `fields:${FIELD_ID}:${LOCALE_CODE}` for pending fields changes or `metadata:${NAME}` for
   * pending metadata changes not persisted yet and on top of the `local_entity`. ID/code are
   * public CMA identifiers, not internal CF IDs. Should only be `null` if there are too many
   * paths to be tracked due to `maxLength` constraint.
   */
  local_changes_paths: null | string;
  /**
   * Point in time when the most-up-to-date local in-memory `local_entity` was received by the
   * editor.
   */
  local_entity_last_fetched_at_tstamp: string;
  /**
   * The `local_entity` state before any local changes.
   */
  local_entity_state: LocalEntityState;
  /**
   * entity.sys.updatedAt of the `local_entity`.
   */
  local_entity_updated_at_tstamp: string;
  /**
   * `entity.sys.version` of the `local_entity`.
   */
  local_entity_version: number;
  /**
   * Local pending state update that was not successful due to the conflict. `null` if there
   * was no local state update.
   */
  local_state_change: LocalEntityState | null;
  organization_key: string;
  /**
   * Stringified object with the following information:
   * - `local_field_locale_changes_count`:  Total number of locally changed field locales on
   * top of the `local_entity`: `count(onlyFieldPaths(local_changes_paths))`
   * - `local_metadata_changes_count`: Total number of locally changed metadata properties on
   * top of the `local_entity`: `count(onlyMetadataPaths(local_changes_paths))`
   * - `remote_field_locale_changes_count`: Total number of field locales changed in
   * `remote_entity` compared to `local_entity`:
   * `count(onlyFieldPaths(remote_changes_paths))`
   * - `remote_metadata_changes_count`: Total number of metadata properties changed in
   * `remote_entity` compared to `local_entity`:
   * `count(onlyMetadataPaths(remote_changes_paths))`
   * - `same_field_locale_conflicts_count`: Pre-computed number of conflicts on same field
   * locales: `count(intersection(onlyFieldPaths(local_changes_paths),
   * onlyFieldPaths(remote_changes_paths)))`
   * - `same_metadata_conflicts_count`: Pre-computed number of conflicts on same metadata
   * property: `count(intersection(onlyMetadataPaths(local_changes_paths),
   * onlyMetadataPaths(remote_changes_paths)))`
   */
  precomputed?: string;
  /**
   * Comma separated paths as in `local_changes_paths` but for `remote_entity` fields or
   * metadata with different values from `local_entity`. See `local_changes_paths` description
   * for specifics and `null` case explanation.
   */
  remote_changes_paths: null | string;
  /**
   * The state of the `remote_entity` after the edit conflict.
   */
  remote_entity_state: LocalEntityState;
  /**
   * entity.sys.updatedAt of the `remote_entity`.
   */
  remote_entity_updated_at_tstamp: string;
  /**
   * entity.sys.updatedBy.sys.id of the `remote_entity`.
   */
  remote_entity_updated_by_user_id: string;
  /**
   * `entity.sys.version` of the `remote_entity`.
   */
  remote_entity_version: number;
  space_key: string;
}

/**
 * Type of the linked entity the action was performed on.
 */
export type EntityEditorEditConflictEntityType = 'Asset' | 'Entry';

/**
 * The `local_entity` state before any local changes.
 *
 * The state of the `remote_entity` after the edit conflict.
 */
export type LocalEntityState = 'archived' | 'draft' | 'inaccessible' | 'published';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EntityListBulkActionPerformed {
  action?: string;
  entity_type?: string;
  environment_key?: string;
  failed_count?: number;
  organization_key?: string;
  space_key?: string;
  succeeded_count?: number;
}

export interface EntryCreated {
  content_type_id?: string;
  entry_ct_entry_reference_fields_count?: number;
  entry_ct_fields_count?: number | null;
  entry_id?: string;
  entry_version?: number;
  environment_key?: string;
  event_origin?: string;
  organization_key: string;
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EntryEditorDisabledFieldsVisibilityToggled {
  entry_id?: string;
  environment_key?: string;
  organization_key?: string;
  show?: boolean;
  space_key?: string;
}

/**
 * Schema of publishing an entry in the webapp
 */
export interface EntryPublished {
  content_type_id?: string;
  entry_ct_entry_reference_fields_count?: number;
  entry_ct_fields_count?: number | null;
  entry_id?: string;
  entry_version?: number;
  environment_key?: string;
  event_origin?: string;
  organization_key: string;
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EntryReferencesTreeActionPerformed {
  action?: string;
  entity_id?: string;
  environment_key?: string;
  organization_key?: string;
  references_count?: number;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface EntryReferencesTreeLoaded {
  circular_references_count?: number;
  entity_id?: string;
  environment_key?: string;
  organization_key?: string;
  references_depth?: number;
  /**
   * Referenced entities count per level that are rendered as nodes on the tree. Note that
   * this isn't necessarily a count of unique entities per level.
   */
  references_per_level?: number[];
  space_key?: string;
}

/**
 * Schema for tracking entry page views
 */
export interface EntryView {
  content_type_id: string;
  content_type_name: string;
  /**
   * Contexts are a remnant from Snowplow event tracking. This is a JSON stringified array of
   * objects where each object used to represent a separate context Snowplow event that would
   * be tracked into a separate Snowplow table depending on its `schema` prop.
   */
  contexts: string;
  editor_type: EditorType;
  entry_id: string;
  environment_key?: string;
  organization_key: string;
  slide_in_level?: number;
  space_key: string;
}

export type EditorType = 'bulk_editor' | 'entry_editor' | 'slide_in_editor';

/**
 * Environment aliases tracking
 */
export interface EnvironmentAliases {
  /**
   * refers to the action performed
   */
  action: null | string;
  /**
   * refers to the internal id of the environment alias
   */
  environment_alias_id: number;
  /**
   * refers to the key of the environment alias
   */
  environment_alias_key: null | string;
  environment_key?: string;
  /**
   * refers to the key of the previously aliased environment
   */
  from_environment_id?: null | string;
  /**
   * refers to the UUID of the previously aliased environment
   */
  from_environment_uuid?: null | string;
  /**
   * This field will contain the X-Contentful-Header sent by sdks and the webapp, allowing us
   * to track the intent of the creation.
   */
  inferred_intent?: null | string;
  /**
   * refers to organization key
   */
  organization_key: null | string;
  /**
   * this will be `web-app` if the webapp sent the request, or anything else the
   * x-contentful-header contains in the platform field, if existing. Null otherwise.
   */
  platform?: null | string;
  /**
   * refers to space key
   */
  space_key: string;
  /**
   * refers to the key of the newly aliased environment
   */
  to_environment_id: null | string;
  /**
   * refers to the UUID of the newly aliased environment
   */
  to_environment_uuid?: null | string;
  /**
   * refers to the http user agent header sent
   */
  user_agent?: null | string;
}

/**
 * Team Developer Workflows want's to track usage of environment policies
 */
export interface EnvironmentPolicies {
  action: string;
  environment_key: string;
  environments_allowed: string[];
  organization_key: string;
  role_key: string;
  role_name: string;
  space_key: string;
}

/**
 * Event is used for tracking goals achieved in a new feature that is being tested.
 */
export interface ExperimentGoalAchieved {
  action: string;
  context?: string;
  environment_key?: string;
  experiment_id: string;
  experiment_variation: string;
  organization_key?: string;
  space_key?: string;
  value?: number;
}

/**
 * Event is used for tracking user interactions during new features that are being tested.
 */
export interface ExperimentInteracted {
  action: string;
  context?: string;
  environment_key?: string;
  experiment_id: string;
  experiment_variation: string;
  organization_key?: string;
  space_key?: string;
  step?: number;
  value?: number;
}

/**
 * Allows to track which user is part of a UI experiment or a particular A/B test variation,
 * e.g. controlled through `LaunchDarkly` or another kind of feature flag.
 */
export interface ExperimentStarted {
  context?: string;
  environment_key?: string;
  /**
   * The experiment name the current user is part of
   */
  experiment_id: string;
  /**
   * The experiment variation the current user is assigned to
   */
  experiment_variation: string;
  /**
   * Current organization key
   */
  organization_key?: string;
  /**
   * Current space key
   */
  space_key?: string;
}

/**
 * Extension was activated
 */
export interface ExtensionActivate {
  environment_key?: string;
  /**
   * Extenstion Indentifyer
   */
  extension_definition_id?: null | string;
  /**
   * Extenstion Indentifyer
   */
  extension_id: string;
  /**
   * Dunno
   */
  location: string;
  /**
   * Refers to organization_key
   */
  organization_key?: null | string;
  /**
   * Refers to space_key
   */
  space_key: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ExtensionRendered {
  environment_key?: string;
  extension_definition_id?: null | string;
  extension_id?: string;
  extension_name?: string;
  installation_params?: any[];
  instance_params?: any[];
  location?: string;
  organization_key?: string;
  space_key?: string;
  src?: null | string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface FairUsePolicyOpened {
  environment_key?: string;
  from_state?: string;
  organization_key?: string;
  space_key?: string;
  ui_source?: string;
}

/**
 * Bulk references editor feature tracking
 */
export interface FeatureBulkEditor {
  action: string;
  content_type_id?: null | string;
  entry_id?: null | string;
  environment_key?: string;
  num_edited_entries?: number | null;
  num_published_entries?: number | null;
  option_added?: boolean | null;
  option_existing?: boolean | null;
  organization_key?: null | string;
  parent_entry_id?: null | string;
  ref_count?: number | null;
  space_key: string;
  status?: null | string;
}

/**
 * Schema for interactions with a reference or media field editor's linked entry or asset
 */
export interface FeatureReferenceAction {
  /**
   * Content type ID of the linked entity the action was performed on. `null` in case of an
   * asset.
   */
  content_type_id: null | string;
  /**
   * ID of the linked entity the action was performed on.
   */
  entity_id: string;
  /**
   * Type of the linked entity the action was performed on.
   */
  entity_type: EntityEditorEditConflictEntityType;
  environment_key?: string;
  /**
   * The action performed on the linked entity.
   */
  event_type: FeatureReferenceActionEventType;
  organization_key: string;
  /**
   * Entry ID of the entry with the field containing the linked entity which the event is
   * about.
   */
  parent_entry_id: string;
  /**
   * `${FIELD_ID}:${LOCALE_CODE}` on the `parent_entry_id` that contains the linked entity
   * which the event is about. ID/code are public CMA identifiers, not internal CF IDs.
   */
  parent_field_path: string;
  space_key: string;
}

/**
 * The action performed on the linked entity.
 */
export type FeatureReferenceActionEventType = 'create' | 'edit' | 'delete' | 'reorder' | 'link';

/**
 * Snapshot tracking feature
 */
export interface FeatureSnapshot {
  action: string;
  entry_fields_count?: number | null;
  entry_id: string;
  entry_version?: number | null;
  environment_key?: string;
  option_changes_discarded?: boolean | null;
  option_full_restore?: boolean | null;
  option_show_diffs_only?: boolean | null;
  organization_key?: null | string;
  restore_fields_count?: number | null;
  snapshot_id?: null | string;
  snapshot_version?: number | null;
  source?: null | string;
  space_key: string;
}

/**
 * Action tracking for the new space wizard
 */
export interface FeatureSpaceWizard {
  action: FeatureSpaceWizardAction;
  current_product_type?: null | string;
  current_space_type?: null | string;
  current_step: null | string;
  intended_action: IntendedAction;
  organization_key: string;
  payment_details_exist?: boolean | null;
  recommended_product_type?: null | string;
  recommended_space_type?: null | string;
  space_key?: null | string;
  target_product_type?: null | string;
  target_space_name?: null | string;
  target_space_template_id?: null | string;
  target_space_type?: null | string;
  target_step?: null | string;
  wizard_scope?: null | string;
  wizard_session_id?: null | string;
}

export type FeatureSpaceWizardAction =
  | 'open'
  | 'cancel'
  | 'confirm'
  | 'navigate'
  | 'link_click'
  | 'space_create'
  | 'space_type_change'
  | 'select_plan'
  | 'entered_details';

export type IntendedAction = 'create' | 'change_space_type';

/**
 * Action tracking for Single Sign-On (SSO) Self Configuration via the webapp
 */
export interface FeatureSsoSelfConfiguration {
  /**
   * The action being performed
   */
  action: string;
  /**
   * If the action is `connection_test_result`, the errors that occurred if the status is
   * failure
   */
  connection_test_result_errors?: any[] | null;
  /**
   * If the action is `connection_test_result`, the status of the latest test result
   */
  connection_test_result_status?: null | string;
  environment_key?: string;
  /**
   * The organization that this is happening in
   */
  organization_key: null | string;
}

/**
 * Generic event for tracking text editor widgets (e.g. StructuredText or Markdown).
 */
export interface FeatureTextEditor {
  /**
   * The action the user has triggered within the text editor
   */
  action: string;
  /**
   * Where the action was triggered, e.g. toolbar icon or shortcut (`null` means we don't know)
   */
  action_origin?: null | string;
  /**
   * Allows to add additional action specific data as a stringified object
   */
  additional_data?: null | string;
  /**
   * Character count after the action was applied
   */
  character_count_after?: number | null;
  /**
   * Character count before the action was applied (useful for paste action)
   */
  character_count_before?: number | null;
  /**
   * The number of characters selected when the action was triggered (e.g. useful to know
   * whether a hyperlink is mostly applied to a selection or not)
   */
  character_count_selection?: number | null;
  /**
   * content_api content_type ID of the entry with the text editor
   */
  content_type_id: string;
  /**
   * The editor widget name (use front-end widget ID)
   */
  editor_name: string;
  /**
   * content_api entry ID with the text editor widget
   */
  entry_id: string;
  environment_key?: string;
  /**
   * ID of field with the text editor widget
   */
  field_id: string;
  /**
   * Locale ID complementing the `field_id`, null if the action is not for one particular
   * locale only.
   */
  field_locale: null | string;
  /**
   * Whether the action was triggered while full-screen mode was active
   */
  is_fullscreen: boolean;
  /**
   * Gatekeeper organization KEY
   */
  organization_key: string;
  /**
   * Gatekeeper space KEY
   */
  space_key: string;
}

/**
 * Event used for the feedback survey after onboarding.
 */
export interface FeedbackSurvey {
  answers?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  type?: string;
  user_id?: string;
}

/**
 * Event used for content type links on the entry editor page
 */
export interface GoToContentTypeLinkClicked {
  /**
   * The content type id of the entry, where the click was performed
   */
  content_type_id: string;
  /**
   * Id of the entry, where the click was performed
   */
  entry_id: string;
  environment_key: string;
  /**
   * Location of the clicked link
   */
  link_location: LinkLocation;
  organization_key: string;
  space_key: string;
  user_id?: string;
}

/**
 * Location of the clicked link
 */
export type LinkLocation =
  | 'entry_list_content_type_column'
  | 'entry_list_actions_menu'
  | 'entry_editor_title'
  | 'entry_editor_actions_menu'
  | 'entry_editor_sidebar_info_tab';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface HighValueFeatureLabelInteracted {
  action?: string;
  environment_key?: string;
  feature?: string;
  organization_key?: string;
  space_key?: string;
  user_type?: string;
}

/**
 * Used to keep track of legacy web app events that are registered in a wrong way, so
 * tracking does not actually work. These events were originally defined for Snowplow or
 * Segment before typewriter was introduced.
 */
export interface InvalidAnalyticsEventFound {
  environment_key: string;
  /**
   * This is not the schema name, but the legacy web app internal event ID used to register
   * the event. This is legacy as it became irrelevant with the move from Snowplow to Segment
   * and the use of typewriter.
   */
  legacy_event_id: string;
  organization_key: string;
  space_key: string;
}

/**
 * Emitted when the user cancels the job
 */
export interface JobsCancel {
  action: string;
  environment_key?: string;
  job_id: string;
  organization_key: string;
  space_key: string;
}

/**
 * Emitted when a user creates a job
 */
export interface JobsCreate {
  action: string;
  environment_key?: string;
  job_id: string;
  organization_key: string;
  scheduled_for: string;
  space_key: string;
  timezone_offset: number;
}

/**
 * Emitted when a user creates a job
 */
export interface JobsUpdate {
  action: string;
  environment_key?: string;
  job_id: string;
  local_timezone?: string;
  organization_key: string;
  scheduled_for: string;
  scheduled_for_timezone?: string;
  space_key: string;
  timezone_offset: number;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface LaunchAppLinkClicked {
  environment_key?: string;
  event_origin?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface LaunchExploreModalAdminEmailCopy {
  copied_user_id: string;
  entity_id: string;
  entity_type: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface LaunchExploreModalClosed {
  close_action: CloseAction;
  entity_id: string;
  entity_type: string;
  environment_key?: string;
  is_dont_show_again_selected: boolean;
  organization_key?: string;
  space_key?: string;
}

export type CloseAction =
  | 'cancel'
  | 'ignore'
  | 'explore:launch_app'
  | 'explore:install_launch_app'
  | 'explore:admin_suggestion_modal';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface LaunchExploreModalOpened {
  entity_id: string;
  entity_type: string;
  environment_key?: string;
  organization_key?: string;
  scheduled_datetime?: Date;
  space_key?: string;
}

/**
 * Track user interactions with the onboarding questionnaier
 */
export interface OnboardingQuestionnaire {
  action: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface OrgSpaceEnvContextChanged {
  /**
   * The space key after the web app context change. Can be `null` when navigating to a space
   * or organization scoped view.
   */
  environment_key?: null | string;
  /**
   * The space key before the web app context change. Can be `null` when navigating from a
   * space or organization scoped view.
   */
  old_environment_key?: null | string;
  /**
   * The organization key before the web app context change. Might be `null` if the user isn't
   * part of any organization anymore, which should be a very rare edge case.
   */
  old_organization_key?: null | string;
  /**
   * The space key before the web app context change. Might be `null` when navigating from an
   * organization scoped view.
   */
  old_space_key?: null | string;
  /**
   * The organization key after the web app context change. Might be `null` if the user isn't
   * part of any organization anymore, which should be a very rare edge case.
   */
  organization_key?: null | string;
  /**
   * The space key after the web app context change. Can be `null` when navigating to an
   * organization scoped view.
   */
  space_key?: null | string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface OrganizationUsagePeriodSelected {
  new_period?: string;
  old_period?: string;
  organization_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface OrganizationUsageTabSelected {
  action?: string;
  new?: string;
  old?: string;
  organization_key?: string;
}

/**
 * Schema for tracking every state transition in the user interface
 */
export interface PageView {
  environment_key?: string;
  from_state?: string;
  from_state_params?: string;
  organization_key?: string;
  space_key?: string;
  to_state: string;
  to_state_params?: string;
}

/**
 * Event used for range select in the pagination
 */
export interface PaginationEntityCountPerPageChanged {
  /**
   * Indicates which entity type is passed
   */
  entity_type: PaginationEntityCountPerPageChangedEntityType;
  environment_key: string;
  organization_key: string;
  /**
   * V1 means old pagination component, V2 is the new pagination from Forma 36
   */
  pagination_version: PaginationVersion;
  /**
   * How many entities per page are selected
   */
  selected_entity_count?: number;
  space_key: string;
  entity_count: any;
}

/**
 * Indicates which entity type is passed
 */
export type PaginationEntityCountPerPageChangedEntityType = 'entry' | 'asset';

/**
 * V1 means old pagination component, V2 is the new pagination from Forma 36
 */
export type PaginationVersion = 'V1' | 'V2';

/**
 * Event used for page numbers in the pagination
 */
export interface PaginationNumberClicked {
  environment_key: string;
  /**
   * The timestamp of the previous click on pagination
   */
  last_pagination_click_timestamp?: string;
  /**
   * Indicates the page number clicked
   */
  next_page_number: number;
  organization_key: string;
  /**
   * Indicates the page number the user was on when they clicked on a different page
   */
  previous_page_number: number;
  space_key: string;
}

/**
 * Event used for previous and next buttons in the pagination
 */
export interface PaginationPagerClicked {
  environment_key: string;
  /**
   * The timestamp of the previous click on pagination
   */
  last_pagination_click_timestamp?: string;
  /**
   * This indicates if the previous click was done in the old version (numbers) or the new
   * version (pager)
   */
  last_pagination_click_type?: LastPaginationClickType;
  organization_key: string;
  /**
   * Indicates if either previous or next was clicked
   */
  pager: Pager;
  /**
   * V1 means old pagination component, V2 is the new pagination from Forma 36
   */
  pagination_version: PaginationVersion;
  space_key: string;
}

/**
 * This indicates if the previous click was done in the old version (numbers) or the new
 * version (pager)
 */
export type LastPaginationClickType = 'numbers' | 'pager';

/**
 * Indicates if either previous or next was clicked
 */
export type Pager = 'previous' | 'next';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ParentEntryLinkFetched {
  entity_id?: string;
  entity_type?: string;
  environment_key?: string;
  /**
   * IDs of "parent" entries linking to the event's subject entity of `entity_type` +
   * `entity_id`
   */
  incoming_link_ids?: string[];
  incoming_links_count?: number;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ParentEntryLinkOpened {
  action?: string;
  dialog_action?: string;
  dialog_session_id?: string;
  entity_id?: string;
  entity_type?: string;
  environment_key?: string;
  incoming_links_count?: number;
  link_entity_id?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface ParentEntryLinksDialogToggled {
  action?: string;
  dialog_action?: string;
  dialog_session_id?: string;
  entity_id?: string;
  entity_type?: string;
  environment_key?: string;
  incoming_links_count?: number;
  organization_key?: string;
  space_key?: string;
}

export interface PersonalAccessToken {
  action?: string;
  personal_access_token_id?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface QuickNavigationOpened {
  environment_key?: string;
  /**
   * Current route state
   */
  from_state?: string;
  groupd_id?: string;
  organization_key?: string;
  space_key?: string;
}

/**
 * Schema for reordering a reference or media field editor's linked entry or asset
 */
export interface ReferencesReordered {
  /**
   * Content type ID of the linked entity the action was performed on. `null` in case of an
   * asset.
   */
  content_type_id: null | string;
  /**
   * ID of the linked entity the action was performed on.
   */
  entity_id: string;
  /**
   * Type of the linked entity the action was performed on.
   */
  entity_type: EntityEditorEditConflictEntityType;
  environment_key?: string;
  /**
   * The action performed on the linked entity.
   */
  event_type: ReferencesReorderedEventType;
  organization_key: string;
  /**
   * Entry ID of the entry with the field containing the linked entity which the event is
   * about.
   */
  parent_entry_id: string;
  /**
   * `${FIELD_ID}:${LOCALE_CODE}` on the `parent_entry_id` that contains the linked entity
   * which the event is about. ID/code are public CMA identifiers, not internal CF IDs.
   */
  parent_field_path: string;
  space_key: string;
}

/**
 * The action performed on the linked entity.
 */
export type ReferencesReorderedEventType =
  | 'move_by_drag_and_drop'
  | 'move_up'
  | 'move_down'
  | 'move_top'
  | 'move_bottom';

export interface ReleaseCreated {
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}

export interface ReleaseDialogBox {
  action: string;
  environment_key: string;
  organization_key: string;
  purpose: string;
  space_key: string;
}

export interface ReleaseEntityAdded {
  asset_count: number;
  entry_count: number;
  environment_key: string;
  organization_key: string;
  release_id: string;
  root_entry_content_type_id?: string;
  root_entry_id?: string;
  space_key: string;
  total_reference_tree_entities?: number;
  ui_source?: string;
}

export interface ReleaseEntityRemoved {
  entity_id: string;
  entity_type: string;
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}

export interface SearchEntryClicked {
  entity_type?: string;
  environment_key?: string;
  index?: number;
  organization_key?: string;
  result_count?: number;
  search_filters?: string[];
  search_query?: string;
  sequence_key?: string;
  space_key?: string;
}

export interface SearchFilterAdded {
  entity_type?: string;
  environment_key?: string;
  filter?: string;
  organization_key?: string;
  result_count?: number;
  search_filters?: string[];
  search_query?: string;
  sequence_key?: string;
  space_key?: string;
}

export interface SearchFilterRemoved {
  entity_type?: string;
  environment_key?: string;
  filter?: string;
  organization_key?: string;
  result_count?: number;
  search_filters?: string[];
  search_query?: string;
  sequence_key?: string;
  space_key?: string;
}

/**
 * Schema for a search performed in the top bar of the webapp
 */
export interface SearchPerform {
  content_type_id?: null | string;
  entity_type: string;
  environment_key?: string;
  organization_key: string;
  result_count: number;
  search_filters?: string[];
  search_query: null | string;
  sequence_key?: null | string;
  space_key: string;
}

export interface SearchQueryChanged {
  entity_type?: string;
  environment_key?: string;
  organization_key?: string;
  result_count?: number;
  search_filters?: string[];
  search_query?: string;
  sequence_key?: string;
  space_key?: string;
}

/**
 * Schema to track slide in editor usage
 */
export interface SlideInEditor {
  action?: string;
  current_slide_level: number;
  environment_key?: string;
  organization_key: string;
  peek_hover_time_ms?: number;
  space_key: string;
  target_slide_level?: number;
}

/**
 * Tracks space creation during space purchase flow. Note that there is other space creation
 * events during different flows, all these events should probably be unified in the future.
 */
export interface SpaceCreated {
  /**
   * The action being performed by the user in this event
   */
  action: SpaceCreatedAction;
  /**
   * sys.id of the newly created space.
   */
  new_space_key: string;
  organization_key: string;
  selected_plan_id: string;
  selected_plan_name: string;
  selected_plan_price: number;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  /**
   * Current space where the user makes the action from. Will be empty if the action is
   * performed from within the organization settings.
   */
  space_key?: string;
  /**
   * Web app view or space creation flow ID to indicate which flow was used to create the
   * space.
   */
  ui_source: UISource;
}

/**
 * The action being performed by the user in this event
 */
export type SpaceCreatedAction = 'space_created';

/**
 * Web app view or space creation flow ID to indicate which flow was used to create the
 * space.
 */
export type UISource = 'self-service-space-purchase';

export interface SpacePurchaseActionPerformed {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseActionPerformedAction;
  can_create_free_space?: boolean;
  can_purchase_apps?: boolean;
  organization_key: string;
  organization_platform?: OrganizationPlatform;
  /**
   * It tracks if the user started the funnel with the option to buy apps selected
   */
  performance_package_preselected?: boolean;
  /**
   * The purchase funnel can be started from different places, e.g.: space home, subscription
   * page, or a marketing email
   */
  purchase_started_from?: string;
  selected_plan_id?: string;
  selected_plan_name?: string;
  selected_plan_price?: number;
  selected_platform_price?: number;
  selected_platform_type?: SelectedPlatformType;
  selected_template?: SelectedTemplate;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  session_type?: SessionType;
  /**
   * The space_key is null if the user is creating a new space and it is a string if the user
   * is updating a certain space
   */
  space_key?: null | string;
  user_organization_role?: UserOrganizationRole;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseActionPerformedAction =
  | 'begin'
  | 'billing_details_entered'
  | 'confirm_purchase'
  | 'payment_details_entered'
  | 'performance_package_purchased'
  | 'platform_selected'
  | 'rename_space_clicked'
  | 'space_details_entered'
  | 'space_plan_selected'
  | 'space_template_created'
  | 'space_template_selected'
  | 'space_type_change';

export type OrganizationPlatform =
  | 'Community'
  | 'Team'
  | 'Enterprise'
  | 'Enterprise High Demand'
  | 'Enterprise Trial'
  | 'Free'
  | 'Self-service';

export type SelectedPlatformType = 'WEB_APP' | 'WEB_APP_COMPOSE_LAUNCH';

export type SelectedTemplate =
  | 'Blog'
  | 'Photo Gallery'
  | 'Product Catalogue'
  | 'Testing Template (DO NOT PUBLISH)'
  | 'The Example App';

export type SessionType = 'create_space' | 'update_space';

export type UserOrganizationRole = 'admin' | 'developer' | 'owner';

export interface SpacePurchaseCanceled {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseCanceledAction;
  current_step: Step;
  organization_key: string;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  space_key?: string;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseCanceledAction = 'cancel';

export type Step =
  | 'BILLING_DETAILS'
  | 'COMPOSE_RECEIPT'
  | 'CONFIRMATION'
  | 'CREDIT_CARD_DETAILS'
  | 'PLATFORM_SELECTION'
  | 'RECEIPT'
  | 'SPACE_DETAILS'
  | 'SPACE_PLAN_SELECTION'
  | 'UPGRADE_RECEIPT';

export interface SpacePurchaseErrored {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseErroredAction;
  error_message?: string;
  error_type: string;
  organization_key: string;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  space_key?: string;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseErroredAction = 'error';

export interface SpacePurchaseFAQOpened {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseFAQOpenedAction;
  organization_key: string;
  question_id: string;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  space_key?: string;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseFAQOpenedAction = 'faq_section_open';

export interface SpacePurchaseLinkClicked {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseLinkClickedAction;
  href?: string;
  intent: string;
  organization_key: string;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  space_key?: string;
  state?: string;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseLinkClickedAction = 'external_link_clicked' | 'internal_link_clicked';

export interface SpacePurchaseStepChanged {
  /**
   * The action being performed by the user in this event
   */
  action: SpacePurchaseStepChangedAction;
  from_step: Step;
  organization_key: string;
  /**
   * Unique identifier for a user session in the space purchase funnel
   */
  session_id: string;
  space_key?: string;
  to_step: Step;
}

/**
 * The action being performed by the user in this event
 */
export type SpacePurchaseStepChangedAction = 'navigate';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface SpaceTeamsAdded {
  environment_key?: string;
  num_err?: number;
  num_success?: number;
  organization_key?: string;
  space_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface SpaceUsageSummaryActionPerformed {
  action?: string;
  organization_key?: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface SpaceUsersAdded {
  admin_selected?: boolean;
  environment_key?: string;
  num_err?: number;
  num_roles?: number;
  num_success?: number;
  organization_key?: string;
  space_key?: string;
}

/**
 * Used to track the number of times users switch to the configuration screen for a given
 * app, in a new environment.
 */
export interface SwitchAppConfigurationEnvironments {
  app_key?: string;
  current_environment_key?: string;
  organization_key?: string;
  space_key?: string;
  target_environment_key?: string;
}

export interface TemplateSurvey {
  answers?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  user_id?: string;
}

/**
 * Schema to track the translation sidebar widgets
 */
export interface TranslationSidebar {
  /**
   * `toggle_widget_mode` is triggered every time the translation sidebar mode is toggled from
   * single to multiple locales (or vice versa). `deselect_active_locale` is triggered when an
   * editor is using the multiple locale mode and deselects one of the active locales using
   * the pills in the sidebar widget. `update_active_locales` is triggered when an editor is
   * using the multiple locale mode and updates the active locales using the locale update
   * modal. `change_focused_locale` is triggered when an editor is using the single locale
   * mode and changes the focused locale using the sidebar locale dropdown.
   */
  action: TranslationSidebarAction;
  /**
   * The total number of locales activated by the editor as a consequence of an
   * `update_active_locales` or `deselect_active_locale` action.
   */
  current_active_locale_count?: number | null;
  /**
   * The widget mode from which the action is executed. When the action is
   * `toggle_widget_mode`, this refers to the mode to which the editor has toggled. Will
   * always be `single` for `change_focused_locale`. Will always be `multiple` for
   * `deselect_active_locale` or `update_active_locales`.
   */
  current_mode: CurrentMode;
  environment_key?: string;
  organization_key: string;
  /**
   * The total number of active locales prior to the triggering of an `update_active_locales`
   * or `deselect_active_locale` action.
   */
  previous_active_locale_count?: number | null;
  space_key: string;
}

/**
 * `toggle_widget_mode` is triggered every time the translation sidebar mode is toggled from
 * single to multiple locales (or vice versa). `deselect_active_locale` is triggered when an
 * editor is using the multiple locale mode and deselects one of the active locales using
 * the pills in the sidebar widget. `update_active_locales` is triggered when an editor is
 * using the multiple locale mode and updates the active locales using the locale update
 * modal. `change_focused_locale` is triggered when an editor is using the single locale
 * mode and changes the focused locale using the sidebar locale dropdown.
 */
export type TranslationSidebarAction =
  | 'change_focused_locale'
  | 'deselect_active_locale'
  | 'toggle_widget_mode'
  | 'update_active_locales';

/**
 * The widget mode from which the action is executed. When the action is
 * `toggle_widget_mode`, this refers to the mode to which the editor has toggled. Will
 * always be `single` for `change_focused_locale`. Will always be `multiple` for
 * `deselect_active_locale` or `update_active_locales`.
 */
export type CurrentMode = 'multiple' | 'single';

/**
 * UI Extension Install Schema
 */
export interface UIExtensionInstall {
  environment_key?: string;
  field_types?: any[] | null;
  installation_params?: any[] | null;
  instance_params?: any[] | null;
  name: string;
  organization_key: string;
  space_key: string;
  src?: null | string;
  type?: null | string;
  url?: null | string;
}

/**
 * UI Extension Save Schema
 */
export interface UIExtensionSave {
  environment_key?: string;
  field_types?: string[];
  installation_params?: string[] | null;
  instance_params?: string[] | null;
  name: string;
  organization_key: string;
  space_key: string;
  src?: null | string;
  ui_extension_id: string;
  version?: number | null;
}

/**
 * Saving webhook in the UI
 */
export interface UIWebhookEditorSave {
  body_transformation?: null | string;
  content_type_header?: null | string;
  custom_headers?: any[] | null;
  environment_key?: string;
  filters?: null | string;
  method?: string;
  organization_key: string;
  space_key: string;
  template_id?: null | string;
  topics?: any[] | null;
  url: string;
  uses_http_basic: boolean;
  version: number;
  webhook_id: string;
  webhook_name: string;
}

export interface UserEnriched {
  email: string;
  is_invited: boolean;
  /**
   * current organization the user belongs to
   */
  organization_key: string;
  /**
   * Subscription plan of the organization
   */
  organization_plan: OrganizationPlan;
  /**
   * current space the user has selected
   */
  space_key?: string;
  /**
   * Classified user persona
   */
  user_persona: UserPersona;
}

/**
 * Subscription plan of the organization
 */
export type OrganizationPlan = 'community' | 'enterprise' | 'team';

/**
 * Classified user persona
 */
export type UserPersona = 'developer' | 'non-developer';

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface UserFeedbackSubmitted {
  about?: string;
  environment_key?: string;
  feedback?: string;
  organization_key?: string;
  space_key?: string;
  target?: string;
}

export interface UserInvited {
  emails_list?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  user_id?: string;
}

/**
 * Schema of creating a view in the webapp
 */
export interface ViewCreate {
  content_type_id: null | string;
  entity_type: string;
  environment_key?: string;
  folder_id: string;
  folder_title: string;
  organization_key: string;
  search_query: null | string;
  space_key: string;
  view_id: string;
}

/**
 * Schema of delete a view in the webapp
 */
export interface ViewDelete {
  entity_type: string;
  environment_key?: string;
  organization_key: string;
  space_key: string;
  view_id: string;
  view_type: string;
}

/**
 * Schema of editing a view in the webapp
 */
export interface ViewEdit {
  change_property: string;
  entity_type: string;
  environment_key?: string;
  organization_key: string;
  space_key: string;
  view_id: string;
  view_roles: null | string;
  view_title: string;
}

/**
 * Schema of loading a view in the webapp
 */
export interface ViewLoad {
  content_type_id: null | string;
  entity_type: string;
  environment_key?: string;
  organization_key: string;
  search_query: null | string;
  sequence_key?: null | string;
  space_key: string;
  view_id: string;
  view_roles: null | string;
  view_title: string;
  view_type: string;
}

/**
 * Schema to track API calls from apps via the widget-renderer
 */
export interface WidgetRendererAPICalled {
  /**
   * 'user_interface', 'compose' or 'launch'
   */
  contentful_app: string;
  environment_key: string;
  /**
   * the location of the custom widget (e.g. sidebar)
   */
  location: string;
  /**
   * App SDK method that has been called. E.g. `space.getEntry`.
   */
  method: string;
  organization_key: string;
  space_key: string;
  widget_key: string;
  /**
   * the namespace of the widget (e.g. app or extension)
   */
  widget_namespace: string;
}

/**
 * This schema was auto-generated. Events tracked against this schema were originally using
 * the `generic` Snowplow schema.
 */
export interface WidgetRendererFallbackActionPerformed {
  /**
   * 'fallback_warning_shown' or 'fallback_rendered'
   */
  action?: string;
  app_definition_id?: string;
  environment_key?: string;
  organization_key?: string;
  space_key?: string;
  user_id?: string;
}

/**
 * The analytics.js snippet should be available via window.analytics.
 * You can install it by following instructions at: https://segment.com/docs/sources/website/analytics.js/quickstart/
 * Make sure to also include the TypeScript declarations with: `npm install --dev @types/segment-analytics`
 */
declare global {
  interface Window {
    analytics: AnalyticsSnippet;
  }
}

/** The callback exposed by analytics.js. */
export type Callback = () => void;

/** A dictionary of options. For example, enable or disable specific destinations for the call. */
export interface Options {
  /**
   * Selectivly filter destinations. By default all destinations are enabled.
   * https://segment.com/docs/sources/website/analytics.js/#selecting-destinations
   */
  integrations?: {
    [key: string]: boolean | { [key: string]: any };
  };
  /**
   * A dictionary of extra context to attach to the call.
   * https://segment.com/docs/spec/common/#context
   */
  context?: Context;
}

/**
 * Context is a dictionary of extra information that provides useful context about a datapoint.
 * @see {@link https://segment.com/docs/spec/common/#context}
 */
export interface Context extends Record<string, any> {
  active?: boolean;
  app?: {
    name?: string;
    version?: string;
    build?: string;
  };
  campaign?: {
    name?: string;
    source?: string;
    medium?: string;
    term?: string;
    content?: string;
  };
  device?: {
    id?: string;
    manufacturer?: string;
    model?: string;
    name?: string;
    type?: string;
    version?: string;
  };
  ip?: string;
  locale?: string;
  location?: {
    city?: string;
    country?: string;
    latitude?: string;
    longitude?: string;
    region?: string;
    speed?: string;
  };
  network?: {
    bluetooth?: string;
    carrier?: string;
    cellular?: string;
    wifi?: string;
  };
  os?: {
    name?: string;
    version?: string;
  };
  page?: {
    hash?: string;
    path?: string;
    referrer?: string;
    search?: string;
    title?: string;
    url?: string;
  };
  referrer?: {
    type?: string;
    name?: string;
    url?: string;
    link?: string;
  };
  screen?: {
    density?: string;
    height?: string;
    width?: string;
  };
  timezone?: string;
  groupId?: string;
  traits?: Record<string, any>;
  userAgent?: string;
}

export type ViolationHandler = (message: Record<string, any>, violations: any[]) => void;

/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * This handler will log a warning message to the console.
 */
export const defaultValidationErrorHandler: ViolationHandler = (message, violations) => {
  const msg = JSON.stringify(
    {
      type: 'Typewriter JSON Schema Validation Error',
      description:
        `You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
        'Tracking Plan spec.',
      errors: violations,
    },
    undefined,
    2
  );

  console.warn(msg);
};

let analytics: () => SegmentAnalytics.AnalyticsJS | undefined = () => {
  return window.analytics;
};

/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
  /**
   * Underlying analytics instance where analytics calls are forwarded on to.
   * Defaults to window.analytics.
   */
  analytics?: SegmentAnalytics.AnalyticsJS;
  /**
   * Handler fired when if an event does not match its spec. This handler
   * does not fire in production mode, because it requires inlining the full
   * JSON Schema spec for each event in your Tracking Plan.
   *
   * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
   * if a message does not match the spec. Otherwise, errors will be logged to stderr.
   */
  onViolation?: ViolationHandler;
}

/**
 * Updates the run-time configuration of this Typewriter client.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {AnalyticsJS} [analytics] - Underlying analytics instance where analytics
 * 		calls are forwarded on to. Defaults to window.analytics.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setTypewriterOptions(options: TypewriterOptions) {
  analytics = options.analytics ? () => options.analytics || window.analytics : analytics;
}

/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message: Options = {}): Options {
  return {
    ...message,
    context: {
      ...(message.context || {}),
      typewriter: {
        language: 'typescript',
        version: '8.0.8',
      },
    },
  };
}

/**
 * Fires a 'AccountDropdownPendingTasksFetched' track call.
 *
 * @param AccountDropdownPendingTasksFetched props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function accountDropdownPendingTasksFetched(
  props: AccountDropdownPendingTasksFetched,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'account_dropdown_pending_tasks_fetched',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AddTeamsInsteadOfUsersClicked' track call.
 *
 * @param AddTeamsInsteadOfUsersClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function addTeamsInsteadOfUsersClicked(
  props: AddTeamsInsteadOfUsersClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'add_teams_instead_of_users_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'APIKey' track call.
 *
 * @param APIKey props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function aPIKey(props: APIKey, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'api_key',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppWidgetBuilderContenttypeAssignment' track call.
 *
 * @param AppWidgetBuilderContenttypeAssignment props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appWidgetBuilderContenttypeAssignment(
  props: AppWidgetBuilderContenttypeAssignment,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app-widget-builder-contenttype-assignment',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppWidgetBuilderWidgetlocationLifecycle' track call.
 *
 * @param AppWidgetBuilderWidgetlocationLifecycle props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appWidgetBuilderWidgetlocationLifecycle(
  props: AppWidgetBuilderWidgetlocationLifecycle,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app-widget-builder-widgetlocation-lifecycle',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppCmaAdapterCalled' track call.
 *
 * @param AppCmaAdapterCalled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appCmaAdapterCalled(
  props: AppCmaAdapterCalled,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_cma_adapter_called',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppLifecycleEvent' track call.
 *
 * @param AppLifecycleEvent props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appLifecycleEvent(
  props: AppLifecycleEvent,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_lifecycle_event',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppLoadingStepPerformanceMeasured' track call.
 *
 * @param AppLoadingStepPerformanceMeasured props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appLoadingStepPerformanceMeasured(
  props: AppLoadingStepPerformanceMeasured,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_loading_step_performance_measured',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppLogoutClicked' track call.
 *
 * @param AppLogoutClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appLogoutClicked(
  props: AppLogoutClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_logout_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppMarketplaceRedesignOptIn' track call.
 *
 * @param AppMarketplaceRedesignOptIn props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appMarketplaceRedesignOptIn(
  props: AppMarketplaceRedesignOptIn,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_marketplace_redesign_opt_in',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppMarketplaceSearchInput' track call.
 *
 * @param AppMarketplaceSearchInput props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appMarketplaceSearchInput(
  props: AppMarketplaceSearchInput,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_marketplace_search_input',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppOpen' track call.
 *
 * @param AppOpen props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appOpen(props: AppOpen, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_open',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppPredefinedIconSaved' track call.
 *
 * @param AppPredefinedIconSaved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appPredefinedIconSaved(
  props: AppPredefinedIconSaved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_predefined_icon_saved',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppSharingPageVisited' track call.
 *
 * @param AppSharingPageVisited props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appSharingPageVisited(
  props: AppSharingPageVisited,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_sharing_page_visited',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialGetInTouchClicked' track call.
 *
 * @param AppTrialGetInTouchClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialGetInTouchClicked(
  props: AppTrialGetInTouchClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_get_in_touch_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialHelpLinkClicked' track call.
 *
 * @param AppTrialHelpLinkClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialHelpLinkClicked(
  props: AppTrialHelpLinkClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_help_link_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialStartClicked' track call.
 *
 * @param AppTrialStartClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialStartClicked(
  props: AppTrialStartClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_start_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialStartPerformanceMeasured' track call.
 *
 * @param AppTrialStartPerformanceMeasured props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialStartPerformanceMeasured(
  props: AppTrialStartPerformanceMeasured,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_start_performance_measured',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialStarted' track call.
 *
 * @param AppTrialStarted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialStarted(
  props: AppTrialStarted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_started',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppTrialTagClicked' track call.
 *
 * @param AppTrialTagClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appTrialTagClicked(
  props: AppTrialTagClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_trial_tag_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppUninstallationReason' track call.
 *
 * @param AppUninstallationReason props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appUninstallationReason(
  props: AppUninstallationReason,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'app_uninstallation_reason',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppsExperimentInteracted' track call.
 *
 * @param AppsExperimentInteracted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appsExperimentInteracted(
  props: AppsExperimentInteracted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'apps_experiment_interacted',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AppsLifecycleEvent' track call.
 *
 * @param AppsLifecycleEvent props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function appsLifecycleEvent(
  props: AppsLifecycleEvent,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'apps_lifecycle_event',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'AssetListAddAssetClicked' track call.
 *
 * @param AssetListAddAssetClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function assetListAddAssetClicked(
  props: AssetListAddAssetClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'asset_list_add_asset_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'Boilerplate' track call.
 *
 * @param Boilerplate props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function boilerplate(props: Boilerplate, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'boilerplate',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'BuildYourFirstAppLinkClicked' track call.
 *
 * @param BuildYourFirstAppLinkClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function buildYourFirstAppLinkClicked(
  props: BuildYourFirstAppLinkClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'build_your_first_app_link_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'BulkAppInstallationManagement' track call.
 *
 * @param BulkAppInstallationManagement props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function bulkAppInstallationManagement(
  props: BulkAppInstallationManagement,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'bulk_app_installation_management',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ChurnSurvey' track call.
 *
 * @param ChurnSurvey props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function churnSurvey(props: ChurnSurvey, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'churn_survey',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CommandKAction' track call.
 *
 * @param CommandKAction props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function commandKAction(
  props: CommandKAction,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'command-k-action',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CommunityAppsInterestedClick' track call.
 *
 * @param CommunityAppsInterestedClick props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function communityAppsInterestedClick(
  props: CommunityAppsInterestedClick,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'community_apps_interested_click',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentPreview' track call.
 *
 * @param ContentPreview props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentPreview(
  props: ContentPreview,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_preview',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentPreviewActionPerformed' track call.
 *
 * @param ContentPreviewActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentPreviewActionPerformed(
  props: ContentPreviewActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_preview_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentTypeFieldAdded' track call.
 *
 * @param ContentTypeFieldAdded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentTypeFieldAdded(
  props: ContentTypeFieldAdded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_type_field_added',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentTypeFieldInteraction' track call.
 *
 * @param ContentTypeFieldInteraction props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentTypeFieldInteraction(
  props: ContentTypeFieldInteraction,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_type_field_interaction',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentTypeFieldSaved' track call.
 *
 * @param ContentTypeFieldSaved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentTypeFieldSaved(
  props: ContentTypeFieldSaved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_type_field_saved',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentTypeGroupInteraction' track call.
 *
 * @param ContentTypeGroupInteraction props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentTypeGroupInteraction(
  props: ContentTypeGroupInteraction,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_type_group_interaction',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ContentTypeSaved' track call.
 *
 * @param ContentTypeSaved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function contentTypeSaved(
  props: ContentTypeSaved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'content_type_saved',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CreateNewEntryOfSameCTClicked' track call.
 *
 * @param CreateNewEntryOfSameCTClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function createNewEntryOfSameCTClicked(
  props: CreateNewEntryOfSameCTClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'create_new_entry_of_same_ct_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CSVExported' track call.
 *
 * @param CSVExported props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function cSVExported(props: CSVExported, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'csv_exported',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CtaClicked' track call.
 *
 * @param CtaClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function ctaClicked(props: CtaClicked, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'cta_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CtaDisplayed' track call.
 *
 * @param CtaDisplayed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function ctaDisplayed(props: CtaDisplayed, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'cta_displayed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'CustomAppsPageVisited' track call.
 *
 * @param CustomAppsPageVisited props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function customAppsPageVisited(
  props: CustomAppsPageVisited,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'custom_apps_page_visited',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'DegradedAppPerformanceModalShown' track call.
 *
 * @param DegradedAppPerformanceModalShown props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function degradedAppPerformanceModalShown(
  props: DegradedAppPerformanceModalShown,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'degraded_app_performance_modal_shown',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'Dialog' track call.
 *
 * @param Dialog props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function dialog(props: Dialog, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'dialog',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EarlyAccessInteraction' track call.
 *
 * @param EarlyAccessInteraction props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function earlyAccessInteraction(
  props: EarlyAccessInteraction,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'early_access_interaction',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EditorInterfaceFieldUpdated' track call.
 *
 * @param EditorInterfaceFieldUpdated props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function editorInterfaceFieldUpdated(
  props: EditorInterfaceFieldUpdated,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'editor_interface_field_updated',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EditorInterfaceSaved' track call.
 *
 * @param EditorInterfaceSaved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function editorInterfaceSaved(
  props: EditorInterfaceSaved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'editor_interface_saved',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EditorLoaded' track call.
 *
 * @param EditorLoaded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function editorLoaded(props: EditorLoaded, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'editor_loaded',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EditorWorkbenchTabOpened' track call.
 *
 * @param EditorWorkbenchTabOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function editorWorkbenchTabOpened(
  props: EditorWorkbenchTabOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'editor_workbench_tab_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ElementClick' track call.
 *
 * @param ElementClick props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function elementClick(props: ElementClick, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'element_click',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EnterpriseSpaceAssignmentStepPerformed' track call.
 *
 * @param EnterpriseSpaceAssignmentStepPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function enterpriseSpaceAssignmentStepPerformed(
  props: EnterpriseSpaceAssignmentStepPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'enterprise_space_assignment_step_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EnterpriseSpaceCreationStepPerformed' track call.
 *
 * @param EnterpriseSpaceCreationStepPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function enterpriseSpaceCreationStepPerformed(
  props: EnterpriseSpaceCreationStepPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'enterprise_space_creation_step_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntityCreateButtonErrored' track call.
 *
 * @param EntityCreateButtonErrored props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entityCreateButtonErrored(
  props: EntityCreateButtonErrored,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entity_create_button_errored',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntityEditorEditConflict' track call.
 *
 * @param EntityEditorEditConflict props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entityEditorEditConflict(
  props: EntityEditorEditConflict,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entity_editor_edit_conflict',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntityListBulkActionPerformed' track call.
 *
 * @param EntityListBulkActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entityListBulkActionPerformed(
  props: EntityListBulkActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entity_list_bulk_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryCreated' track call.
 *
 * @param EntryCreated props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryCreated(props: EntryCreated, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_created',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryEditorDisabledFieldsVisibilityToggled' track call.
 *
 * @param EntryEditorDisabledFieldsVisibilityToggled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryEditorDisabledFieldsVisibilityToggled(
  props: EntryEditorDisabledFieldsVisibilityToggled,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_editor_disabled_fields_visibility_toggled',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryPublished' track call.
 *
 * @param EntryPublished props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryPublished(
  props: EntryPublished,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_published',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryReferencesTreeActionPerformed' track call.
 *
 * @param EntryReferencesTreeActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryReferencesTreeActionPerformed(
  props: EntryReferencesTreeActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_references_tree_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryReferencesTreeLoaded' track call.
 *
 * @param EntryReferencesTreeLoaded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryReferencesTreeLoaded(
  props: EntryReferencesTreeLoaded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_references_tree_loaded',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EntryView' track call.
 *
 * @param EntryView props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function entryView(props: EntryView, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'entry_view',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EnvironmentAliases' track call.
 *
 * @param EnvironmentAliases props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function environmentAliases(
  props: EnvironmentAliases,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'environment_aliases',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'EnvironmentPolicies' track call.
 *
 * @param EnvironmentPolicies props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function environmentPolicies(
  props: EnvironmentPolicies,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'environment_policies',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ExperimentGoalAchieved' track call.
 *
 * @param ExperimentGoalAchieved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function experimentGoalAchieved(
  props: ExperimentGoalAchieved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'experiment_goal_achieved',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ExperimentInteracted' track call.
 *
 * @param ExperimentInteracted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function experimentInteracted(
  props: ExperimentInteracted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'experiment_interacted',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ExperimentStarted' track call.
 *
 * @param ExperimentStarted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function experimentStarted(
  props: ExperimentStarted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'experiment_started',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ExtensionActivate' track call.
 *
 * @param ExtensionActivate props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function extensionActivate(
  props: ExtensionActivate,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'extension_activate',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ExtensionRendered' track call.
 *
 * @param ExtensionRendered props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function extensionRendered(
  props: ExtensionRendered,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'extension_rendered',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FairUsePolicyOpened' track call.
 *
 * @param FairUsePolicyOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function fairUsePolicyOpened(
  props: FairUsePolicyOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'fair_use_policy_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureBulkEditor' track call.
 *
 * @param FeatureBulkEditor props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureBulkEditor(
  props: FeatureBulkEditor,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_bulk_editor',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureReferenceAction' track call.
 *
 * @param FeatureReferenceAction props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureReferenceAction(
  props: FeatureReferenceAction,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_reference_action',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureSnapshot' track call.
 *
 * @param FeatureSnapshot props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureSnapshot(
  props: FeatureSnapshot,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_snapshot',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureSpaceWizard' track call.
 *
 * @param FeatureSpaceWizard props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureSpaceWizard(
  props: FeatureSpaceWizard,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_space_wizard',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureSsoSelfConfiguration' track call.
 *
 * @param FeatureSsoSelfConfiguration props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureSsoSelfConfiguration(
  props: FeatureSsoSelfConfiguration,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_sso_self_configuration',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeatureTextEditor' track call.
 *
 * @param FeatureTextEditor props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function featureTextEditor(
  props: FeatureTextEditor,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feature_text_editor',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'FeedbackSurvey' track call.
 *
 * @param FeedbackSurvey props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function feedbackSurvey(
  props: FeedbackSurvey,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'feedback_survey',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'GoToContentTypeLinkClicked' track call.
 *
 * @param GoToContentTypeLinkClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function goToContentTypeLinkClicked(
  props: GoToContentTypeLinkClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'go_to_content_type_link_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'HighValueFeatureLabelInteracted' track call.
 *
 * @param HighValueFeatureLabelInteracted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function highValueFeatureLabelInteracted(
  props: HighValueFeatureLabelInteracted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'high_value_feature_label_interacted',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'InvalidAnalyticsEventFound' track call.
 *
 * @param InvalidAnalyticsEventFound props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function invalidAnalyticsEventFound(
  props: InvalidAnalyticsEventFound,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'invalid_analytics_event_found',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'JobsCancel' track call.
 *
 * @param JobsCancel props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function jobsCancel(props: JobsCancel, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'jobs_cancel',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'JobsCreate' track call.
 *
 * @param JobsCreate props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function jobsCreate(props: JobsCreate, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'jobs_create',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'JobsUpdate' track call.
 *
 * @param JobsUpdate props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function jobsUpdate(props: JobsUpdate, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'jobs_update',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'LaunchAppLinkClicked' track call.
 *
 * @param LaunchAppLinkClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function launchAppLinkClicked(
  props: LaunchAppLinkClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'launch_app_link_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'LaunchExploreModalAdminEmailCopy' track call.
 *
 * @param LaunchExploreModalAdminEmailCopy props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function launchExploreModalAdminEmailCopy(
  props: LaunchExploreModalAdminEmailCopy,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'launch_explore_modal_admin_email_copy',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'LaunchExploreModalClosed' track call.
 *
 * @param LaunchExploreModalClosed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function launchExploreModalClosed(
  props: LaunchExploreModalClosed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'launch_explore_modal_closed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'LaunchExploreModalOpened' track call.
 *
 * @param LaunchExploreModalOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function launchExploreModalOpened(
  props: LaunchExploreModalOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'launch_explore_modal_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'OnboardingQuestionnaire' track call.
 *
 * @param OnboardingQuestionnaire props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function onboardingQuestionnaire(
  props: OnboardingQuestionnaire,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'onboarding_questionnaire',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'OrgSpaceEnvContextChanged' track call.
 *
 * @param OrgSpaceEnvContextChanged props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function orgSpaceEnvContextChanged(
  props: OrgSpaceEnvContextChanged,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'org_space_env_context_changed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'OrganizationUsagePeriodSelected' track call.
 *
 * @param OrganizationUsagePeriodSelected props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function organizationUsagePeriodSelected(
  props: OrganizationUsagePeriodSelected,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'organization_usage_period_selected',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'OrganizationUsageTabSelected' track call.
 *
 * @param OrganizationUsageTabSelected props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function organizationUsageTabSelected(
  props: OrganizationUsageTabSelected,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'organization_usage_tab_selected',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'PageView' track call.
 *
 * @param PageView props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function pageView(props: PageView, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'page_view',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'PaginationEntityCountPerPageChanged' track call.
 *
 * @param PaginationEntityCountPerPageChanged props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function paginationEntityCountPerPageChanged(
  props: PaginationEntityCountPerPageChanged,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'pagination_entity_count_per_page_changed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'PaginationNumberClicked' track call.
 *
 * @param PaginationNumberClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function paginationNumberClicked(
  props: PaginationNumberClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'pagination_number_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'PaginationPagerClicked' track call.
 *
 * @param PaginationPagerClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function paginationPagerClicked(
  props: PaginationPagerClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'pagination_pager_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ParentEntryLinkFetched' track call.
 *
 * @param ParentEntryLinkFetched props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function parentEntryLinkFetched(
  props: ParentEntryLinkFetched,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'parent_entry_link_fetched',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ParentEntryLinkOpened' track call.
 *
 * @param ParentEntryLinkOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function parentEntryLinkOpened(
  props: ParentEntryLinkOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'parent_entry_link_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ParentEntryLinksDialogToggled' track call.
 *
 * @param ParentEntryLinksDialogToggled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function parentEntryLinksDialogToggled(
  props: ParentEntryLinksDialogToggled,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'parent_entry_links_dialog_toggled',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'PersonalAccessToken' track call.
 *
 * @param PersonalAccessToken props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function personalAccessToken(
  props: PersonalAccessToken,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'personal_access_token',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'QuickNavigationOpened' track call.
 *
 * @param QuickNavigationOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function quickNavigationOpened(
  props: QuickNavigationOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'quick_navigation_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ReferencesReordered' track call.
 *
 * @param ReferencesReordered props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function referencesReordered(
  props: ReferencesReordered,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'references_reordered',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ReleaseCreated' track call.
 *
 * @param ReleaseCreated props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function releaseCreated(
  props: ReleaseCreated,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'release_created',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ReleaseDialogBox' track call.
 *
 * @param ReleaseDialogBox props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function releaseDialogBox(
  props: ReleaseDialogBox,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'release_dialog_box',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ReleaseEntityAdded' track call.
 *
 * @param ReleaseEntityAdded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function releaseEntityAdded(
  props: ReleaseEntityAdded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'release_entity_added',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ReleaseEntityRemoved' track call.
 *
 * @param ReleaseEntityRemoved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function releaseEntityRemoved(
  props: ReleaseEntityRemoved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'release_entity_removed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SearchEntryClicked' track call.
 *
 * @param SearchEntryClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function searchEntryClicked(
  props: SearchEntryClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'search_entry_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SearchFilterAdded' track call.
 *
 * @param SearchFilterAdded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function searchFilterAdded(
  props: SearchFilterAdded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'search_filter_added',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SearchFilterRemoved' track call.
 *
 * @param SearchFilterRemoved props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function searchFilterRemoved(
  props: SearchFilterRemoved,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'search_filter_removed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SearchPerform' track call.
 *
 * @param SearchPerform props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function searchPerform(props: SearchPerform, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'search_perform',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SearchQueryChanged' track call.
 *
 * @param SearchQueryChanged props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function searchQueryChanged(
  props: SearchQueryChanged,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'search_query_changed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SlideInEditor' track call.
 *
 * @param SlideInEditor props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function slideInEditor(props: SlideInEditor, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'slide_in_editor',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpaceCreated' track call.
 *
 * @param SpaceCreated props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spaceCreated(props: SpaceCreated, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_created',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseActionPerformed' track call.
 *
 * @param SpacePurchaseActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseActionPerformed(
  props: SpacePurchaseActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseCanceled' track call.
 *
 * @param SpacePurchaseCanceled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseCanceled(
  props: SpacePurchaseCanceled,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_canceled',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseErrored' track call.
 *
 * @param SpacePurchaseErrored props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseErrored(
  props: SpacePurchaseErrored,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_errored',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseFAQOpened' track call.
 *
 * @param SpacePurchaseFAQOpened props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseFAQOpened(
  props: SpacePurchaseFAQOpened,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_faq_opened',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseLinkClicked' track call.
 *
 * @param SpacePurchaseLinkClicked props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseLinkClicked(
  props: SpacePurchaseLinkClicked,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_link_clicked',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpacePurchaseStepChanged' track call.
 *
 * @param SpacePurchaseStepChanged props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spacePurchaseStepChanged(
  props: SpacePurchaseStepChanged,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_purchase_step_changed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpaceTeamsAdded' track call.
 *
 * @param SpaceTeamsAdded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spaceTeamsAdded(
  props: SpaceTeamsAdded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_teams_added',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpaceUsageSummaryActionPerformed' track call.
 *
 * @param SpaceUsageSummaryActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spaceUsageSummaryActionPerformed(
  props: SpaceUsageSummaryActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_usage_summary_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SpaceUsersAdded' track call.
 *
 * @param SpaceUsersAdded props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function spaceUsersAdded(
  props: SpaceUsersAdded,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'space_users_added',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'SwitchAppConfigurationEnvironments' track call.
 *
 * @param SwitchAppConfigurationEnvironments props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function switchAppConfigurationEnvironments(
  props: SwitchAppConfigurationEnvironments,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'switch_app_configuration_environments',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'TemplateSurvey' track call.
 *
 * @param TemplateSurvey props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function templateSurvey(
  props: TemplateSurvey,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'template_survey',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'TranslationSidebar' track call.
 *
 * @param TranslationSidebar props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function translationSidebar(
  props: TranslationSidebar,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'translation_sidebar',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UIExtensionInstall' track call.
 *
 * @param UIExtensionInstall props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function uIExtensionInstall(
  props: UIExtensionInstall,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'ui_extension_install',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UIExtensionSave' track call.
 *
 * @param UIExtensionSave props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function uIExtensionSave(
  props: UIExtensionSave,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'ui_extension_save',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UIWebhookEditorSave' track call.
 *
 * @param UIWebhookEditorSave props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function uIWebhookEditorSave(
  props: UIWebhookEditorSave,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'ui_webhook_editor_save',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UserEnriched' track call.
 *
 * @param UserEnriched props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function userEnriched(props: UserEnriched, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'user_enriched',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UserFeedbackSubmitted' track call.
 *
 * @param UserFeedbackSubmitted props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function userFeedbackSubmitted(
  props: UserFeedbackSubmitted,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'user_feedback_submitted',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'UserInvited' track call.
 *
 * @param UserInvited props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function userInvited(props: UserInvited, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'user_invited',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ViewCreate' track call.
 *
 * @param ViewCreate props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function viewCreate(props: ViewCreate, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'view_create',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ViewDelete' track call.
 *
 * @param ViewDelete props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function viewDelete(props: ViewDelete, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'view_delete',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ViewEdit' track call.
 *
 * @param ViewEdit props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function viewEdit(props: ViewEdit, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'view_edit',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'ViewLoad' track call.
 *
 * @param ViewLoad props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function viewLoad(props: ViewLoad, options?: Options, callback?: Callback): void {
  const a = analytics();
  if (a) {
    a.track(
      'view_load',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'WidgetRendererAPICalled' track call.
 *
 * @param WidgetRendererAPICalled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function widgetRendererAPICalled(
  props: WidgetRendererAPICalled,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'widget_renderer_api_called',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}
/**
 * Fires a 'WidgetRendererFallbackActionPerformed' track call.
 *
 * @param WidgetRendererFallbackActionPerformed props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
export function widgetRendererFallbackActionPerformed(
  props: WidgetRendererFallbackActionPerformed,
  options?: Options,
  callback?: Callback
): void {
  const a = analytics();
  if (a) {
    a.track(
      'widget_renderer_fallback_action_performed',
      props || {},
      {
        ...options,
        context: {
          ...(options?.context || {}),
          typewriter: {
            language: 'typescript',
            version: '',
          },
        },
      },
      callback
    );
  }
}

const clientAPI = {
  /**
   * Updates the run-time configuration of this Typewriter client.
   *
   * @param {TypewriterOptions} options - the options to upsert
   *
   * @typedef {Object} TypewriterOptions
   * @property {AnalyticsJS} [analytics] - Underlying analytics instance where analytics
   * 		calls are forwarded on to. Defaults to window.analytics.
   * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
   * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
   * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
   * 		will be logged to stderr.
   */
  setTypewriterOptions,

  /**
   * Fires a 'AccountDropdownPendingTasksFetched' track call.
   *
   * @param AccountDropdownPendingTasksFetched props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  accountDropdownPendingTasksFetched,
  /**
   * Fires a 'AddTeamsInsteadOfUsersClicked' track call.
   *
   * @param AddTeamsInsteadOfUsersClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  addTeamsInsteadOfUsersClicked,
  /**
   * Fires a 'APIKey' track call.
   *
   * @param APIKey props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  aPIKey,
  /**
   * Fires a 'AppWidgetBuilderContenttypeAssignment' track call.
   *
   * @param AppWidgetBuilderContenttypeAssignment props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appWidgetBuilderContenttypeAssignment,
  /**
   * Fires a 'AppWidgetBuilderWidgetlocationLifecycle' track call.
   *
   * @param AppWidgetBuilderWidgetlocationLifecycle props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appWidgetBuilderWidgetlocationLifecycle,
  /**
   * Fires a 'AppCmaAdapterCalled' track call.
   *
   * @param AppCmaAdapterCalled props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appCmaAdapterCalled,
  /**
   * Fires a 'AppLifecycleEvent' track call.
   *
   * @param AppLifecycleEvent props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appLifecycleEvent,
  /**
   * Fires a 'AppLoadingStepPerformanceMeasured' track call.
   *
   * @param AppLoadingStepPerformanceMeasured props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appLoadingStepPerformanceMeasured,
  /**
   * Fires a 'AppLogoutClicked' track call.
   *
   * @param AppLogoutClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appLogoutClicked,
  /**
   * Fires a 'AppMarketplaceRedesignOptIn' track call.
   *
   * @param AppMarketplaceRedesignOptIn props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appMarketplaceRedesignOptIn,
  /**
   * Fires a 'AppMarketplaceSearchInput' track call.
   *
   * @param AppMarketplaceSearchInput props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appMarketplaceSearchInput,
  /**
   * Fires a 'AppOpen' track call.
   *
   * @param AppOpen props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appOpen,
  /**
   * Fires a 'AppPredefinedIconSaved' track call.
   *
   * @param AppPredefinedIconSaved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appPredefinedIconSaved,
  /**
   * Fires a 'AppSharingPageVisited' track call.
   *
   * @param AppSharingPageVisited props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appSharingPageVisited,
  /**
   * Fires a 'AppTrialGetInTouchClicked' track call.
   *
   * @param AppTrialGetInTouchClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialGetInTouchClicked,
  /**
   * Fires a 'AppTrialHelpLinkClicked' track call.
   *
   * @param AppTrialHelpLinkClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialHelpLinkClicked,
  /**
   * Fires a 'AppTrialStartClicked' track call.
   *
   * @param AppTrialStartClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialStartClicked,
  /**
   * Fires a 'AppTrialStartPerformanceMeasured' track call.
   *
   * @param AppTrialStartPerformanceMeasured props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialStartPerformanceMeasured,
  /**
   * Fires a 'AppTrialStarted' track call.
   *
   * @param AppTrialStarted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialStarted,
  /**
   * Fires a 'AppTrialTagClicked' track call.
   *
   * @param AppTrialTagClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appTrialTagClicked,
  /**
   * Fires a 'AppUninstallationReason' track call.
   *
   * @param AppUninstallationReason props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appUninstallationReason,
  /**
   * Fires a 'AppsExperimentInteracted' track call.
   *
   * @param AppsExperimentInteracted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appsExperimentInteracted,
  /**
   * Fires a 'AppsLifecycleEvent' track call.
   *
   * @param AppsLifecycleEvent props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  appsLifecycleEvent,
  /**
   * Fires a 'AssetListAddAssetClicked' track call.
   *
   * @param AssetListAddAssetClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  assetListAddAssetClicked,
  /**
   * Fires a 'Boilerplate' track call.
   *
   * @param Boilerplate props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  boilerplate,
  /**
   * Fires a 'BuildYourFirstAppLinkClicked' track call.
   *
   * @param BuildYourFirstAppLinkClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  buildYourFirstAppLinkClicked,
  /**
   * Fires a 'BulkAppInstallationManagement' track call.
   *
   * @param BulkAppInstallationManagement props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  bulkAppInstallationManagement,
  /**
   * Fires a 'ChurnSurvey' track call.
   *
   * @param ChurnSurvey props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  churnSurvey,
  /**
   * Fires a 'CommandKAction' track call.
   *
   * @param CommandKAction props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  commandKAction,
  /**
   * Fires a 'CommunityAppsInterestedClick' track call.
   *
   * @param CommunityAppsInterestedClick props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  communityAppsInterestedClick,
  /**
   * Fires a 'ContentPreview' track call.
   *
   * @param ContentPreview props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentPreview,
  /**
   * Fires a 'ContentPreviewActionPerformed' track call.
   *
   * @param ContentPreviewActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentPreviewActionPerformed,
  /**
   * Fires a 'ContentTypeFieldAdded' track call.
   *
   * @param ContentTypeFieldAdded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentTypeFieldAdded,
  /**
   * Fires a 'ContentTypeFieldInteraction' track call.
   *
   * @param ContentTypeFieldInteraction props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentTypeFieldInteraction,
  /**
   * Fires a 'ContentTypeFieldSaved' track call.
   *
   * @param ContentTypeFieldSaved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentTypeFieldSaved,
  /**
   * Fires a 'ContentTypeGroupInteraction' track call.
   *
   * @param ContentTypeGroupInteraction props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentTypeGroupInteraction,
  /**
   * Fires a 'ContentTypeSaved' track call.
   *
   * @param ContentTypeSaved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  contentTypeSaved,
  /**
   * Fires a 'CreateNewEntryOfSameCTClicked' track call.
   *
   * @param CreateNewEntryOfSameCTClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  createNewEntryOfSameCTClicked,
  /**
   * Fires a 'CSVExported' track call.
   *
   * @param CSVExported props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  cSVExported,
  /**
   * Fires a 'CtaClicked' track call.
   *
   * @param CtaClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  ctaClicked,
  /**
   * Fires a 'CtaDisplayed' track call.
   *
   * @param CtaDisplayed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  ctaDisplayed,
  /**
   * Fires a 'CustomAppsPageVisited' track call.
   *
   * @param CustomAppsPageVisited props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  customAppsPageVisited,
  /**
   * Fires a 'DegradedAppPerformanceModalShown' track call.
   *
   * @param DegradedAppPerformanceModalShown props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  degradedAppPerformanceModalShown,
  /**
   * Fires a 'Dialog' track call.
   *
   * @param Dialog props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  dialog,
  /**
   * Fires a 'EarlyAccessInteraction' track call.
   *
   * @param EarlyAccessInteraction props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  earlyAccessInteraction,
  /**
   * Fires a 'EditorInterfaceFieldUpdated' track call.
   *
   * @param EditorInterfaceFieldUpdated props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  editorInterfaceFieldUpdated,
  /**
   * Fires a 'EditorInterfaceSaved' track call.
   *
   * @param EditorInterfaceSaved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  editorInterfaceSaved,
  /**
   * Fires a 'EditorLoaded' track call.
   *
   * @param EditorLoaded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  editorLoaded,
  /**
   * Fires a 'EditorWorkbenchTabOpened' track call.
   *
   * @param EditorWorkbenchTabOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  editorWorkbenchTabOpened,
  /**
   * Fires a 'ElementClick' track call.
   *
   * @param ElementClick props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  elementClick,
  /**
   * Fires a 'EnterpriseSpaceAssignmentStepPerformed' track call.
   *
   * @param EnterpriseSpaceAssignmentStepPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  enterpriseSpaceAssignmentStepPerformed,
  /**
   * Fires a 'EnterpriseSpaceCreationStepPerformed' track call.
   *
   * @param EnterpriseSpaceCreationStepPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  enterpriseSpaceCreationStepPerformed,
  /**
   * Fires a 'EntityCreateButtonErrored' track call.
   *
   * @param EntityCreateButtonErrored props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entityCreateButtonErrored,
  /**
   * Fires a 'EntityEditorEditConflict' track call.
   *
   * @param EntityEditorEditConflict props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entityEditorEditConflict,
  /**
   * Fires a 'EntityListBulkActionPerformed' track call.
   *
   * @param EntityListBulkActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entityListBulkActionPerformed,
  /**
   * Fires a 'EntryCreated' track call.
   *
   * @param EntryCreated props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryCreated,
  /**
   * Fires a 'EntryEditorDisabledFieldsVisibilityToggled' track call.
   *
   * @param EntryEditorDisabledFieldsVisibilityToggled props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryEditorDisabledFieldsVisibilityToggled,
  /**
   * Fires a 'EntryPublished' track call.
   *
   * @param EntryPublished props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryPublished,
  /**
   * Fires a 'EntryReferencesTreeActionPerformed' track call.
   *
   * @param EntryReferencesTreeActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryReferencesTreeActionPerformed,
  /**
   * Fires a 'EntryReferencesTreeLoaded' track call.
   *
   * @param EntryReferencesTreeLoaded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryReferencesTreeLoaded,
  /**
   * Fires a 'EntryView' track call.
   *
   * @param EntryView props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  entryView,
  /**
   * Fires a 'EnvironmentAliases' track call.
   *
   * @param EnvironmentAliases props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  environmentAliases,
  /**
   * Fires a 'EnvironmentPolicies' track call.
   *
   * @param EnvironmentPolicies props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  environmentPolicies,
  /**
   * Fires a 'ExperimentGoalAchieved' track call.
   *
   * @param ExperimentGoalAchieved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  experimentGoalAchieved,
  /**
   * Fires a 'ExperimentInteracted' track call.
   *
   * @param ExperimentInteracted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  experimentInteracted,
  /**
   * Fires a 'ExperimentStarted' track call.
   *
   * @param ExperimentStarted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  experimentStarted,
  /**
   * Fires a 'ExtensionActivate' track call.
   *
   * @param ExtensionActivate props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  extensionActivate,
  /**
   * Fires a 'ExtensionRendered' track call.
   *
   * @param ExtensionRendered props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  extensionRendered,
  /**
   * Fires a 'FairUsePolicyOpened' track call.
   *
   * @param FairUsePolicyOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  fairUsePolicyOpened,
  /**
   * Fires a 'FeatureBulkEditor' track call.
   *
   * @param FeatureBulkEditor props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureBulkEditor,
  /**
   * Fires a 'FeatureReferenceAction' track call.
   *
   * @param FeatureReferenceAction props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureReferenceAction,
  /**
   * Fires a 'FeatureSnapshot' track call.
   *
   * @param FeatureSnapshot props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureSnapshot,
  /**
   * Fires a 'FeatureSpaceWizard' track call.
   *
   * @param FeatureSpaceWizard props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureSpaceWizard,
  /**
   * Fires a 'FeatureSsoSelfConfiguration' track call.
   *
   * @param FeatureSsoSelfConfiguration props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureSsoSelfConfiguration,
  /**
   * Fires a 'FeatureTextEditor' track call.
   *
   * @param FeatureTextEditor props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  featureTextEditor,
  /**
   * Fires a 'FeedbackSurvey' track call.
   *
   * @param FeedbackSurvey props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  feedbackSurvey,
  /**
   * Fires a 'GoToContentTypeLinkClicked' track call.
   *
   * @param GoToContentTypeLinkClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  goToContentTypeLinkClicked,
  /**
   * Fires a 'HighValueFeatureLabelInteracted' track call.
   *
   * @param HighValueFeatureLabelInteracted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  highValueFeatureLabelInteracted,
  /**
   * Fires a 'InvalidAnalyticsEventFound' track call.
   *
   * @param InvalidAnalyticsEventFound props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  invalidAnalyticsEventFound,
  /**
   * Fires a 'JobsCancel' track call.
   *
   * @param JobsCancel props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  jobsCancel,
  /**
   * Fires a 'JobsCreate' track call.
   *
   * @param JobsCreate props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  jobsCreate,
  /**
   * Fires a 'JobsUpdate' track call.
   *
   * @param JobsUpdate props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  jobsUpdate,
  /**
   * Fires a 'LaunchAppLinkClicked' track call.
   *
   * @param LaunchAppLinkClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  launchAppLinkClicked,
  /**
   * Fires a 'LaunchExploreModalAdminEmailCopy' track call.
   *
   * @param LaunchExploreModalAdminEmailCopy props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  launchExploreModalAdminEmailCopy,
  /**
   * Fires a 'LaunchExploreModalClosed' track call.
   *
   * @param LaunchExploreModalClosed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  launchExploreModalClosed,
  /**
   * Fires a 'LaunchExploreModalOpened' track call.
   *
   * @param LaunchExploreModalOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  launchExploreModalOpened,
  /**
   * Fires a 'OnboardingQuestionnaire' track call.
   *
   * @param OnboardingQuestionnaire props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  onboardingQuestionnaire,
  /**
   * Fires a 'OrgSpaceEnvContextChanged' track call.
   *
   * @param OrgSpaceEnvContextChanged props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  orgSpaceEnvContextChanged,
  /**
   * Fires a 'OrganizationUsagePeriodSelected' track call.
   *
   * @param OrganizationUsagePeriodSelected props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  organizationUsagePeriodSelected,
  /**
   * Fires a 'OrganizationUsageTabSelected' track call.
   *
   * @param OrganizationUsageTabSelected props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  organizationUsageTabSelected,
  /**
   * Fires a 'PageView' track call.
   *
   * @param PageView props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  pageView,
  /**
   * Fires a 'PaginationEntityCountPerPageChanged' track call.
   *
   * @param PaginationEntityCountPerPageChanged props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  paginationEntityCountPerPageChanged,
  /**
   * Fires a 'PaginationNumberClicked' track call.
   *
   * @param PaginationNumberClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  paginationNumberClicked,
  /**
   * Fires a 'PaginationPagerClicked' track call.
   *
   * @param PaginationPagerClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  paginationPagerClicked,
  /**
   * Fires a 'ParentEntryLinkFetched' track call.
   *
   * @param ParentEntryLinkFetched props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  parentEntryLinkFetched,
  /**
   * Fires a 'ParentEntryLinkOpened' track call.
   *
   * @param ParentEntryLinkOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  parentEntryLinkOpened,
  /**
   * Fires a 'ParentEntryLinksDialogToggled' track call.
   *
   * @param ParentEntryLinksDialogToggled props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  parentEntryLinksDialogToggled,
  /**
   * Fires a 'PersonalAccessToken' track call.
   *
   * @param PersonalAccessToken props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  personalAccessToken,
  /**
   * Fires a 'QuickNavigationOpened' track call.
   *
   * @param QuickNavigationOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  quickNavigationOpened,
  /**
   * Fires a 'ReferencesReordered' track call.
   *
   * @param ReferencesReordered props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  referencesReordered,
  /**
   * Fires a 'ReleaseCreated' track call.
   *
   * @param ReleaseCreated props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  releaseCreated,
  /**
   * Fires a 'ReleaseDialogBox' track call.
   *
   * @param ReleaseDialogBox props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  releaseDialogBox,
  /**
   * Fires a 'ReleaseEntityAdded' track call.
   *
   * @param ReleaseEntityAdded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  releaseEntityAdded,
  /**
   * Fires a 'ReleaseEntityRemoved' track call.
   *
   * @param ReleaseEntityRemoved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  releaseEntityRemoved,
  /**
   * Fires a 'SearchEntryClicked' track call.
   *
   * @param SearchEntryClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  searchEntryClicked,
  /**
   * Fires a 'SearchFilterAdded' track call.
   *
   * @param SearchFilterAdded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  searchFilterAdded,
  /**
   * Fires a 'SearchFilterRemoved' track call.
   *
   * @param SearchFilterRemoved props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  searchFilterRemoved,
  /**
   * Fires a 'SearchPerform' track call.
   *
   * @param SearchPerform props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  searchPerform,
  /**
   * Fires a 'SearchQueryChanged' track call.
   *
   * @param SearchQueryChanged props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  searchQueryChanged,
  /**
   * Fires a 'SlideInEditor' track call.
   *
   * @param SlideInEditor props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  slideInEditor,
  /**
   * Fires a 'SpaceCreated' track call.
   *
   * @param SpaceCreated props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spaceCreated,
  /**
   * Fires a 'SpacePurchaseActionPerformed' track call.
   *
   * @param SpacePurchaseActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseActionPerformed,
  /**
   * Fires a 'SpacePurchaseCanceled' track call.
   *
   * @param SpacePurchaseCanceled props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseCanceled,
  /**
   * Fires a 'SpacePurchaseErrored' track call.
   *
   * @param SpacePurchaseErrored props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseErrored,
  /**
   * Fires a 'SpacePurchaseFAQOpened' track call.
   *
   * @param SpacePurchaseFAQOpened props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseFAQOpened,
  /**
   * Fires a 'SpacePurchaseLinkClicked' track call.
   *
   * @param SpacePurchaseLinkClicked props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseLinkClicked,
  /**
   * Fires a 'SpacePurchaseStepChanged' track call.
   *
   * @param SpacePurchaseStepChanged props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spacePurchaseStepChanged,
  /**
   * Fires a 'SpaceTeamsAdded' track call.
   *
   * @param SpaceTeamsAdded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spaceTeamsAdded,
  /**
   * Fires a 'SpaceUsageSummaryActionPerformed' track call.
   *
   * @param SpaceUsageSummaryActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spaceUsageSummaryActionPerformed,
  /**
   * Fires a 'SpaceUsersAdded' track call.
   *
   * @param SpaceUsersAdded props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  spaceUsersAdded,
  /**
   * Fires a 'SwitchAppConfigurationEnvironments' track call.
   *
   * @param SwitchAppConfigurationEnvironments props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  switchAppConfigurationEnvironments,
  /**
   * Fires a 'TemplateSurvey' track call.
   *
   * @param TemplateSurvey props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  templateSurvey,
  /**
   * Fires a 'TranslationSidebar' track call.
   *
   * @param TranslationSidebar props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  translationSidebar,
  /**
   * Fires a 'UIExtensionInstall' track call.
   *
   * @param UIExtensionInstall props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  uIExtensionInstall,
  /**
   * Fires a 'UIExtensionSave' track call.
   *
   * @param UIExtensionSave props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  uIExtensionSave,
  /**
   * Fires a 'UIWebhookEditorSave' track call.
   *
   * @param UIWebhookEditorSave props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  uIWebhookEditorSave,
  /**
   * Fires a 'UserEnriched' track call.
   *
   * @param UserEnriched props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  userEnriched,
  /**
   * Fires a 'UserFeedbackSubmitted' track call.
   *
   * @param UserFeedbackSubmitted props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  userFeedbackSubmitted,
  /**
   * Fires a 'UserInvited' track call.
   *
   * @param UserInvited props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  userInvited,
  /**
   * Fires a 'ViewCreate' track call.
   *
   * @param ViewCreate props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  viewCreate,
  /**
   * Fires a 'ViewDelete' track call.
   *
   * @param ViewDelete props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  viewDelete,
  /**
   * Fires a 'ViewEdit' track call.
   *
   * @param ViewEdit props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  viewEdit,
  /**
   * Fires a 'ViewLoad' track call.
   *
   * @param ViewLoad props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  viewLoad,
  /**
   * Fires a 'WidgetRendererAPICalled' track call.
   *
   * @param WidgetRendererAPICalled props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  widgetRendererAPICalled,
  /**
   * Fires a 'WidgetRendererFallbackActionPerformed' track call.
   *
   * @param WidgetRendererFallbackActionPerformed props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 	call is fired.
   */
  widgetRendererFallbackActionPerformed,
};

export default new Proxy<typeof clientAPI>(clientAPI, {
  get(target, method) {
    if (typeof method === 'string' && target.hasOwnProperty(method)) {
      return target[method as keyof typeof clientAPI];
    }

    return () => {
      console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
         a) Re-generate your typewriter client: \`npx typewriter\`
         b) Add it to your Tracking Plan: https://app.segment.com/segment-oscb/protocols/tracking-plans/rs_1zTHJU9fd5mt7cndWnd4PgJbMCE`);
      const a = analytics();
      if (a) {
        a.track(
          'Unknown Analytics Call Fired',
          {
            method,
          },
          withTypewriterContext()
        );
      }
    };
  },
});
