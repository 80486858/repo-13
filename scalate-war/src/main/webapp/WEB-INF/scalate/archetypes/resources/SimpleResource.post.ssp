<%@ import val it: org.fusesource.scalate.console.ArchetypeResource %>
<% 
  val params = org.fusesource.scalate.console.ResourceParams(it); 
  import params._
  
  val fileName = scalaSourceFileName(qualifiedClassName) 
  if (exists(fileName)) {
%>

<h3>Could not create file as <%= editLink(fileName) { %>
  ${shorten(fileName)}
<% } %> already exists!</h3>

<p>To continue you must delete the file through your IDE, then refresh this page in the browser</p>

<%    
  } else {
    createFile(fileName) { 
%>
package ${packageName}

import com.sun.jersey.api.view.ImplicitProduces
import javax.ws.rs.{GET, Path, Produces}

@Path("${resourceUri}")
@ImplicitProduces(Array("text/html;qs=5"))
class ${className} {

  // TODO delete me:
  // this is just some dummy data we can use in a template
  def name = "Some Name"
}
<%  }

    // lets generate a template file too
    val templateFile = "src/main/webapp/WEB-INF/" + packageName.replace('.', '/') + "/" + className + ".index.scaml"
    createFile(templateFile) {
%>
-@ import val it : ${className}
%h1 ${className}
%p
  Hello I am the view of a resource.
%p
  My name is:
  %b
    = name
<%  }
%>

<h3>generated</h3>

<ul>
  <li>resource: <%= editLink(fileName) { %>
  ${shorten(fileName)}
<% } %>
  </li>
  <li>view: <%= editLink(templateFile) { %>
  ${shorten(templateFile)}
<% } %>
  </li>
</ul>

<h3><a href="${resourceUri}">Try the New Resource</a></h3>

<p>To be able to dynamically build and reload new code on the fly you should enable <a href="http://scalate.fusesource.org/jrebel.html">JRebel</a></p>

<p>Otherwise you should restart your web application to be able to try this new resource.</p>

<%}%>
