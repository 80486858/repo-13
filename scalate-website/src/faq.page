---
title: FAQ
in_menu: false
sort_info: 41
# FYI:
# The fragments processor allows the TOC to generated by the menu tag.
--- name:overview pipeline:tags

<h1>Burning Questions?</h1>

This page contains all the frequently asked questions about the {project_name:} project.

<div style="font-size: 10pt; clear: left; padding: 5px;">
{menu: {used_nodes: fragments, min_levels: 4, max_levels: 6}}
<div>

--- name:content pipeline:tags,markdown,fragments

## General Questions

General questions on the *{project_name:}* project.

### Why the name Scalate?

Scalate stands for Scala Template Engine hence ScalaTE, though its easier on the eye to just write 'Scalate'

### Why should I use Scalate?

Details of [why you should use Scalate here](why.html)

### Which template engine should I use?

See [which template engine you should use](which.html)

### What is the license?

The license is [Apache 2 License](http://www.apache.org/licenses/LICENSE-2.0)

### How do I get started?

Try the [Getting Started Guide](documentation/getting-started.html) which should have you *scalating* nicely really quickly!

### How do I get support?

See the [support guide](support.html) for more details.

### How do I build Scalate?

First [get the source](source.html) then see the [building guide](building.html)

### Why does the Maven build not download jars?

The default profile in maven does not include remote repos, so make sure you add the download profile when building for the first time. First [get the source](source.html) then see the [building guide](building.html).

e.g.

    mvn install -Pdownload

### Why does the SBT build not find any dependent jars?

We currently support both a [Maven](http://maven.apache.org/) and [SBT](http://code.google.com/p/simple-build-tool/) build. We tend to use Maven for doing signed releases and reporting and SBT for incremental compiling and testing when in development.

If you want to just use SBT then you first need to perform a maven build to download all the dependencies

    mvn install -Pdownload

The SBT build then uses the dependencies downloaded in your local maven repository. This saves us having to maintain duplicate information for dependency versions and repositories across both builds; the SBT build just reuses the dependencies and repositories from Maven. One day it would be nice for SBT to just be able to parse the pom.xml and find that information for itself, so folks won't have to do a Maven build first.

For more detail see the [building guide](building.html).



### How do I contribute or become a committer?

We love [contributions](contributing.html)! More details on how to contribute and how to become a committer are in the [contributing guide](contributing.html).

### How do I register for the issue tracker?

For more detail see the [support page](support.html). If you haven't done so already you can  <a href=" https://www.assembla.com/user/signup">register with the issue tracker here</a>

### How does the website work?

For details on how to edit the website and how it works see [How the Site works](site.html)

## The Scalate Approach

### Should I use SSP or Scaml?

If you know [Velocity](http://velocity.apache.org/), JSP or Erb then you will feel right at home with [SSP](documentation/ssp-reference.html) which has very similar syntax - the main difference is its use of Scala for expressions.

However if you are generating markup, particularly HTML, then we highly recommend you take a look at [Scaml](documentation/scaml-reference.html) which is a Scala dialect of [Haml](http://haml-lang.com/). Scaml is a little bit of an acquired taste - if you've never used HAML before it might seem a little odd at first; but when you get used to it we're sure you'll really like it.

While [SSP](documentation/ssp-reference.html) and [Scaml](documentation/scaml-reference.html) offer the same kinds of features and expressive power, using Scala expressions, iteration, navigation and pattern matching, [Scaml](documentation/scaml-reference.html) really shines for generating HTML and XML markup - its much more concise and DRY. [SSP](documentation/ssp-reference.html) is much better for generating arbitrary textual output such as emails (as Scaml is highly optimised to nested markup and HTML in particular) - or for getting you up to speed quickly on Scalate if you've only used JSP or Erb in the past.

### How does Scalate compare to JSP?

See our [comparison of Scalate to JSP](compare-jsp.html)

### How does Scalate compare to Lift views?

We [compare approaches here](code-in-view.html), see which is right for you and your team.

### Isn't putting code in views a bad thing?

Well it all depends really; see [this article](code-in-view.html) for a more in depth debate on the subject.

## Using Scalate

### How do I get started?

Your best bet is starting with the [User Guide](documentation/index.html) maybe starting by [running the samples](http://scalate.fusesource.org/documentation/index.html#running_the_samples) then for more detail reading either of the template references 

* [Ssp Reference](documentation/ssp-reference.html) 
* [Scaml Reference](documentation/scaml-reference.html) 

### How can I use Scalate and Scala in a RAD way?

Scalate itself auto-recompiles and reloads templates on the fly. However if you are changing Scala code which the Scalate templates use then you normally have to stop and restart your web container.

So for a more RAD approach we recommend using [JRebel](jrebel.html) which can hot-reload the Scala code on the fly, leading to a rapid edit &lt;-&gt; browser reload cycle.

### How can I access the Servlet request, response or servletContext

When using Scalate with servlets or [Jog](documentation/jog.html) you might wish to access the current request, response, servletContext or servletConfig objects used by the servlet engine. These variables are all available by default thanks to the
[ServletRenderContext](http://scalate.fusesource.org/maven/{project_snapshot_version:}/scalate-core/scaladocs/org/fusesource/scalate/servlet/ServletRenderContext.html) API which is imported by default.

So your template can refer to these variables if they are required directly - rather like they can be in JSP.

{pygmentize:: jsp}
<h1>Hello ${someMethod(request, response)}</h1>
{pygmentize}

where someMethod is a function takes a Servlet request and response parameter.

However if you are using 1.1 or later you can [avoid having to mention these variables in your templates](documentation/user-guide.html#accessing_request_state_inside_a_scala_function); instead your snippet functions can refer to these values directly (or you can write snippet functions that hide these parameters to simplify your templates)



### Can I use Scalate with a non file based template?

You can configure the [TemplateEngine](http://scalate.fusesource.org/maven/{project_snapshot_version:}/scalate-core/scaladocs/org/fusesource/scalate/TemplateEngine.html)  to provide a *resourceLoader* to resolve URIs for templates. See the [Custom Template Loading in the Embedding Guide](documentation/scalate-embedding-guide.html#custom_template_loading).

Or if you are using the Scalate API directly there are methods on [TemplateEngine](http://scalate.fusesource.org/maven/{project_snapshot_version:}/scalate-core/scaladocs/org/fusesource/scalate/TemplateEngine.html) API for loading a [Template](http://scalate.fusesource.org/maven/{project_snapshot_version:}/scalate-core/scaladocs/org/fusesource/scalate/Template.html) by supplying the source of the template as a String. So you can create the template content however you wish, then compile and render the template.

For example
{pygmentize:: scala}
// a template with an attribute 
val source = "<%@ val name: String %> hello ${name}" 

val template = engine.compileSsp(source) 
val output = engine.layout(template, Map("name" -> "James")) 

// test it works... 
expect("hello James") {output} 
{pygmentize}

To see more examples try the [TemplateEngineTest.scala test case](http://github.com/scalate/scalate/blob/master/scalate-core/src/test/scala/org/fusesource/scalate/TemplateEngineTest.scala)

