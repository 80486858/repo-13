- import util.parsing.input.Position
- import org.fusesource.scalate._
- import org.fusesource.scalate.console._
- val consoleHelper = new ConsoleHelper(context)
- import consoleHelper._

%link(href={uri("/css/scalate/errors.css")} rel="stylesheet" type="text/css")

- def displayError(file:String, pos:Position, message:String)
  .header.block
    %h1
      = message

  .source.block
    %h2
      = editLink(file, pos.line, pos.column)
        in #{shorten(file)} near line #{pos.line} col #{pos.column}

    - for (s <- lines(file, pos))
      - val ss = s.style(pos.line)
      = editLink(file, s.line, (if (pos.line == s.line) pos.column else 1))
        %div(class=ss)
          %span.lineNumber
            = s.line
          - if (pos.line == s.line)
            - val (prefix, ch, postfix) = s.splitOnCharacter(pos.column - 1)
            %pre<
              &~ prefix
              %span.errorCol><
                &~ ch
              &~ postfix
          - else
            %pre<
              &~ s.source

#scalate-error
  - exception match
    - case e:InvalidSyntaxException =>
      - displayError( e.template, e.pos, e.brief)

    - case e:CompilerException =>
      - for ( error <- e.errors )
        - displayError(error.file, error.pos, error.message)
        - val o = error.original
        - if (o != null)
          .source.block
            = editLink(o.file, o.pos.line, o.pos.column)
              from generated #{shorten(o.file)} near line #{o.pos.line} col #{o.pos.line}

    - case u =>
      .header.block
        %h1
          = oldError
        %p
          = u
